{"version":3,"file":"react-phone-number-input-input-mobile.js","sources":["../node_modules/input-format/modules/helpers.js","../node_modules/input-format/modules/close braces.js","../node_modules/input-format/modules/format.js","../node_modules/input-format/modules/template formatter.js","../node_modules/input-format/modules/dom.js","../node_modules/input-format/modules/input control.js","../node_modules/input-format/modules/parse.js","../node_modules/input-format/modules/edit.js","../node_modules/input-format/modules/react/Input.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js","../node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js","../node_modules/libphonenumber-js/es6/helpers/parseDigits.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js","../node_modules/libphonenumber-js/es6/helpers/mergeArrays.js","../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","../node_modules/libphonenumber-js/es6/helpers/RFC3966.js","../node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js","../node_modules/libphonenumber-js/es6/helpers/getNumberType.js","../node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js","../node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js","../node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js","../node_modules/libphonenumber-js/es6/format_.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/validate_.js","../node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js","../node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js","../node_modules/libphonenumber-js/es6/parse_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","../node_modules/libphonenumber-js/es6/AsYouTypeState.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.complete.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.js","../node_modules/libphonenumber-js/es6/AsYouTypeParser.js","../node_modules/libphonenumber-js/es6/AsYouType.js","../node_modules/libphonenumber-js/es6/getCountries.js","../modules/helpers/inputValuePrefix.js","../modules/InputSmart.js","../modules/InputBasic.js","../node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","../modules/helpers/getInternationalPhoneNumberPrefix.js","../modules/libphonenumber/formatPhoneNumber.js","../modules/libphonenumber/isValidPhoneNumber.js","../modules/libphonenumber/isPossiblePhoneNumber.js","../modules/usePhoneDigits.js","../modules/PhoneInput.js","../input-mobile/index.js"],"sourcesContent":["// Counts all occurences of a symbol in a string\nexport function count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes)\n  // but template placeholder characters don't fall into that range\n  // so skipping such miscellaneous \"exotic\" characters\n  // won't matter here for just counting placeholder character occurrences.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n}\n//# sourceMappingURL=helpers.js.map","import { count_occurences } from './helpers';\nexport default function close_braces(retained_template, template) {\n  var placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n  var empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n  var cut_before = retained_template.length;\n  var opening_braces = count_occurences('(', retained_template);\n  var closing_braces = count_occurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    retained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return retained_template;\n}\n//# sourceMappingURL=close braces.js.map","import template_formatter from './template formatter'; // Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\n\nexport default function format(value, caret, formatter) {\n  if (typeof formatter === 'string') {\n    formatter = template_formatter(formatter);\n  }\n\n  var _ref = formatter(value) || {},\n      text = _ref.text,\n      template = _ref.template;\n\n  if (text === undefined) {\n    text = value;\n  }\n\n  if (template) {\n    if (caret === undefined) {\n      caret = text.length;\n    } else {\n      var index = 0;\n      var found = false;\n      var possibly_last_input_character_index = -1;\n\n      while (index < text.length && index < template.length) {\n        // Character placeholder found\n        if (text[index] !== template[index]) {\n          if (caret === 0) {\n            found = true;\n            caret = index;\n            break;\n          }\n\n          possibly_last_input_character_index = index;\n          caret--;\n        }\n\n        index++;\n      } // If the caret was positioned after last input character,\n      // then the text caret index is just after the last input character.\n\n\n      if (!found) {\n        caret = possibly_last_input_character_index + 1;\n      }\n    }\n  }\n\n  return {\n    text: text,\n    caret: caret\n  };\n}\n//# sourceMappingURL=format.js.map","import { count_occurences } from './helpers';\nimport close_braces from './close braces'; // Takes a `template` where character placeholders\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\n//\n// Returns a function which takes `value` characters\n// and returns the `template` filled with those characters.\n// If the `template` can only be partially filled\n// then it is cut off.\n//\n// If `should_close_braces` is `true`,\n// then it will also make sure all dangling braces are closed,\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\n//\n\nexport default function (template) {\n  var placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n  var should_close_braces = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!template) {\n    return function (value) {\n      return {\n        text: value\n      };\n    };\n  }\n\n  var characters_in_template = count_occurences(placeholder, template);\n  return function (value) {\n    if (!value) {\n      return {\n        text: '',\n        template: template\n      };\n    }\n\n    var value_character_index = 0;\n    var filled_in_template = ''; // Using `.split('')` here instead of normal `for ... of`\n    // because the importing application doesn't neccessarily include an ES6 polyfill.\n    // The `.split('')` approach discards \"exotic\" UTF-8 characters\n    // (the ones consisting of four bytes)\n    // but template placeholder characters don't fall into that range\n    // and appending UTF-8 characters to a string in parts still works.\n\n    for (var _iterator = template.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var character = _ref;\n\n      if (character !== placeholder) {\n        filled_in_template += character;\n        continue;\n      }\n\n      filled_in_template += value[value_character_index];\n      value_character_index++; // If the last available value character has been filled in,\n      // then return the filled in template\n      // (either trim the right part or retain it,\n      //  if no more character placeholders in there)\n\n      if (value_character_index === value.length) {\n        // If there are more character placeholders\n        // in the right part of the template\n        // then simply trim it.\n        if (value.length < characters_in_template) {\n          break;\n        }\n      }\n    }\n\n    if (should_close_braces) {\n      filled_in_template = close_braces(filled_in_template, template);\n    }\n\n    return {\n      text: filled_in_template,\n      template: template\n    };\n  };\n}\n//# sourceMappingURL=template formatter.js.map","// Gets <input/> selection bounds\nexport function getSelection(element) {\n  // If no selection, return nothing\n  if (element.selectionStart === element.selectionEnd) {\n    return;\n  }\n\n  return {\n    start: element.selectionStart,\n    end: element.selectionEnd\n  };\n} // Key codes\n\nexport var Keys = {\n  Backspace: 8,\n  Delete: 46\n}; // Finds out the operation to be intercepted and performed\n// based on the key down event `keyCode`.\n\nexport function getOperation(event) {\n  switch (event.keyCode) {\n    case Keys.Backspace:\n      return 'Backspace';\n\n    case Keys.Delete:\n      return 'Delete';\n  }\n} // Gets <input/> caret position\n\nexport function getCaretPosition(element) {\n  return element.selectionStart;\n} // Sets <input/> caret position\n\nexport function setCaretPosition(element, caret_position) {\n  // Sanity check\n  if (caret_position === undefined) {\n    return;\n  } // Set caret position.\n  // There has been an issue with caret positioning on Android devices.\n  // https://github.com/catamphetamine/input-format/issues/2\n  // I was revisiting this issue and looked for similar issues in other libraries.\n  // For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n  // They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n  // The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n  // https://github.com/text-mask/text-mask/issues/300\n  // They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n  // https://github.com/text-mask/text-mask/pull/400/files\n  // I've implemented the same workaround here.\n\n\n  if (isAndroid()) {\n    setTimeout(function () {\n      return element.setSelectionRange(caret_position, caret_position);\n    }, 0);\n  } else {\n    element.setSelectionRange(caret_position, caret_position);\n  }\n}\n\nfunction isAndroid() {\n  // `navigator` is not defined when running mocha tests.\n  if (typeof navigator !== 'undefined') {\n    return ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n  }\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;\n//# sourceMappingURL=dom.js.map","import edit from './edit';\nimport parse from './parse';\nimport format from './format';\nimport { getOperation, getSelection, getCaretPosition, setCaretPosition } from './dom';\nexport function onCut(event, input, _parse, _format, on_change) {\n  // The actual cut hasn't happened just yet hence the timeout.\n  setTimeout(function () {\n    return format_input_text(input, _parse, _format, undefined, on_change);\n  }, 0);\n}\nexport function onPaste(event, input, _parse, _format, on_change) {\n  var selection = getSelection(input); // If selection is made,\n  // just erase the selected text\n  // prior to pasting\n\n  if (selection) {\n    erase_selection(input, selection);\n  }\n\n  format_input_text(input, _parse, _format, undefined, on_change);\n}\nexport function onChange(event, input, _parse, _format, on_change) {\n  format_input_text(input, _parse, _format, undefined, on_change);\n} // Intercepts \"Delete\" and \"Backspace\" keys.\n// (hitting \"Delete\" or \"Backspace\" at any caret\n//  position should always result in rasing a digit)\n\nexport function onKeyDown(event, input, _parse, _format, on_change) {\n  var operation = getOperation(event);\n\n  switch (operation) {\n    case 'Delete':\n    case 'Backspace':\n      // Intercept this operation and perform it manually.\n      event.preventDefault();\n      var selection = getSelection(input); // If selection is made,\n      // just erase the selected text,\n      // and don't apply any more operations to it.\n\n      if (selection) {\n        erase_selection(input, selection);\n        return format_input_text(input, _parse, _format, undefined, on_change);\n      } // Else, perform the (character erasing) operation manually\n\n\n      return format_input_text(input, _parse, _format, operation, on_change);\n\n    default: // Will be handled when `onChange` fires.\n\n  }\n}\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\n\nfunction erase_selection(input, selection) {\n  var text = input.value;\n  text = text.slice(0, selection.start) + text.slice(selection.end);\n  input.value = text;\n  setCaretPosition(input, selection.start);\n}\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\n\n\nfunction format_input_text(input, _parse, _format, operation, on_change) {\n  // Parse `<input/>` textual value.\n  // Get `value` and `caret` position.\n  var _parse2 = parse(input.value, getCaretPosition(input), _parse),\n      value = _parse2.value,\n      caret = _parse2.caret; // If a user performed an operation (e.g. \"Backspace\", \"Delete\")\n  // then apply that operation and get new `value` and `caret` position.\n\n\n  if (operation) {\n    var operation_applied = edit(value, caret, operation);\n    value = operation_applied.value;\n    caret = operation_applied.caret;\n  } // Format the `value`.\n  // (and reposition the caret accordingly)\n\n\n  var formatted = format(value, caret, _format);\n  var text = formatted.text;\n  caret = formatted.caret; // Set `<input/>` textual value manually\n  // to prevent React from resetting the caret position\n  // later inside subsequent `render()`.\n  // Doesn't work for custom `inputComponent`s for some reason.\n\n  input.value = text; // Position the caret properly.\n\n  setCaretPosition(input, caret); // `<input/>` textual value may have changed,\n  // so the parsed `value` may have changed too.\n  // The `value` didn't neccessarily change\n  // but it might have.\n\n  on_change(value);\n}\n//# sourceMappingURL=input control.js.map","// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nexport default function parse(text, caret_position, parse_character) {\n  var value = '';\n  var focused_input_character_index = 0;\n  var index = 0;\n\n  while (index < text.length) {\n    var character = parse_character(text[index], value);\n\n    if (character !== undefined) {\n      value += character;\n\n      if (caret_position !== undefined) {\n        if (caret_position === index) {\n          focused_input_character_index = value.length - 1;\n        } else if (caret_position > index) {\n          focused_input_character_index = value.length;\n        }\n      }\n    }\n\n    index++;\n  } // If caret position wasn't specified\n\n\n  if (caret_position === undefined) {\n    // Then set caret position to \"after the last input character\"\n    focused_input_character_index = value.length;\n  }\n\n  var result = {\n    value: value,\n    caret: focused_input_character_index\n  };\n  return result;\n}\n//# sourceMappingURL=parse.js.map","// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nexport default function edit(value, caret, operation) {\n  switch (operation) {\n    case 'Backspace':\n      // If there exists the previous character,\n      // then erase it and reposition the caret.\n      if (caret > 0) {\n        // Remove the previous character\n        value = value.slice(0, caret - 1) + value.slice(caret); // Position the caret where the previous (erased) character was\n\n        caret--;\n      }\n\n      break;\n\n    case 'Delete':\n      // Remove current digit (if any)\n      value = value.slice(0, caret) + value.slice(caret + 1);\n      break;\n  }\n\n  return {\n    value: value,\n    caret: caret\n  };\n}\n//# sourceMappingURL=edit.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// This is just `./ReactInput.js` rewritten in Hooks.\nimport React, { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { onChange as onInputChange, onCut as onInputCut, onPaste as onInputPaste, onKeyDown as onInputKeyDown } from '../input control'; // Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\nfunction Input(_ref, ref) {\n  var value = _ref.value,\n      parse = _ref.parse,\n      format = _ref.format,\n      InputComponent = _ref.inputComponent,\n      onChange = _ref.onChange,\n      onCut = _ref.onCut,\n      onPaste = _ref.onPaste,\n      onKeyDown = _ref.onKeyDown,\n      rest = _objectWithoutProperties(_ref, [\"value\", \"parse\", \"format\", \"inputComponent\", \"onChange\", \"onCut\", \"onPaste\", \"onKeyDown\"]);\n\n  var ownRef = useRef();\n  ref = ref || ownRef;\n\n  var _onChange = useCallback(function (event) {\n    return onInputChange(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange]);\n\n  var _onPaste = useCallback(function (event) {\n    if (onPaste) {\n      onPaste(event);\n    }\n\n    return onInputPaste(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange, onPaste]);\n\n  var _onCut = useCallback(function (event) {\n    if (onCut) {\n      onCut(event);\n    }\n\n    return onInputCut(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange, onCut]);\n\n  var _onKeyDown = useCallback(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    return onInputKeyDown(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange, onKeyDown]);\n\n  return React.createElement(InputComponent, _extends({}, rest, {\n    ref: ref,\n    value: format(isEmptyValue(value) ? '' : value).text,\n    onKeyDown: _onKeyDown,\n    onChange: _onChange,\n    onPaste: _onPaste,\n    onCut: _onCut\n  }));\n}\n\nInput = React.forwardRef(Input);\nInput.propTypes = {\n  // Parses a single characher of `<input/>` text.\n  parse: PropTypes.func.isRequired,\n  // Formats `value` into `<input/>` text.\n  format: PropTypes.func.isRequired,\n  // Renders `<input/>` by default.\n  inputComponent: PropTypes.elementType.isRequired,\n  // `<input/>` `type` attribute.\n  type: PropTypes.string.isRequired,\n  // Is parsed from <input/> text.\n  value: PropTypes.string,\n  // This handler is called each time `<input/>` text is changed.\n  onChange: PropTypes.func.isRequired,\n  // Passthrough\n  onKeyDown: PropTypes.func,\n  onCut: PropTypes.func,\n  onPaste: PropTypes.func\n};\nInput.defaultProps = {\n  // Renders `<input/>` by default.\n  inputComponent: 'input',\n  // `<input/>` `type` attribute.\n  type: 'text'\n};\nexport default Input;\n\nfunction isEmptyValue(value) {\n  return value === undefined || value === null;\n}\n//# sourceMappingURL=Input.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://stackoverflow.com/a/46971044/970769\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport { ParseError as default };\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n//# sourceMappingURL=ParseError.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}\n//# sourceMappingURL=semver-compare.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport compare from './tools/semver-compare'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata =\n/*#__PURE__*/\nfunction () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport { Metadata as default };\n\nvar NumberingPlan =\n/*#__PURE__*/\nfunction () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    }\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    }\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format =\n/*#__PURE__*/\nfunction () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type =\n/*#__PURE__*/\nfunction () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  var version = metadata.version;\n\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n//# sourceMappingURL=metadata.js.map","import { VALID_DIGITS } from '../../constants'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(VALID_DIGITS, \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\n\nexport default function createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}\n//# sourceMappingURL=createExtensionPattern.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from '../constants';\nimport createExtensionPattern from './extension/createExtensionPattern'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nexport var VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\nexport var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + createExtensionPattern() + ')?'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","import createExtensionPattern from './createExtensionPattern'; // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport default function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}\n//# sourceMappingURL=extractExtension.js.map","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}\n//# sourceMappingURL=parseDigits.js.map","import { parseDigit } from './helpers/parseDigits';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","import mergeArrays from './mergeArrays';\nexport default function checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n} // Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n      return 'INVALID_LENGTH';\n    }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=checkNumberLength.js.map","/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport default function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=mergeArrays.js.map","import Metadata from './metadata';\nimport checkNumberLength from './helpers/checkNumberLength';\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  }\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport isViablePhoneNumber from './isViablePhoneNumber'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var part = _ref;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref2) {\n  var number = _ref2.number,\n      ext = _ref2.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport default function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n//# sourceMappingURL=matchesEntirely.js.map","import Metadata from '../metadata';\nimport matchesEntirely from './matchesEntirely';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // v1 metadata.\n    // Legacy.\n    // Deprecated.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _i = 0, _NON_FIXED_LINE_PHONE = NON_FIXED_LINE_PHONE_TYPES; _i < _NON_FIXED_LINE_PHONE.length; _i++) {\n    var type = _NON_FIXED_LINE_PHONE[_i];\n\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n}\n//# sourceMappingURL=getNumberType.js.map","import { VALID_PUNCTUATION } from '../constants'; // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n//# sourceMappingURL=applyInternationalSeparatorStyle.js.map","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle'; // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly. Therefore, we use `\\d`, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport default function formatNationalNumberUsingFormat(number, format, _ref) {\n  var useInternationalFormat = _ref.useInternationalFormat,\n      withNationalPrefix = _ref.withNationalPrefix,\n      carrierCode = _ref.carrierCode,\n      metadata = _ref.metadata;\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : // This library doesn't use `domestic_carrier_code_formatting_rule`,\n  // because that one is only used when formatting phone numbers\n  // for dialing from a mobile phone, and this is not a dialing library.\n  // carrierCode && format.domesticCarrierCodeFormattingRule()\n  // \t// First, replace the $CC in the formatting rule with the desired carrier code.\n  // \t// Then, replace the $FG in the formatting rule with the first group\n  // \t// and the carrier code combined in the appropriate way.\n  // \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\n  // \t: (\n  // \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\n  // \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n  // \t\t\t: format.format()\n  // \t)\n  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n//# sourceMappingURL=formatNationalNumberUsingFormat.js.map","import Metadata from '../metadata';\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport default function getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n\n  return countryMetadata.defaultIDDPrefix();\n}\n//# sourceMappingURL=getIddPrefix.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport matchesEntirely from './helpers/matchesEntirely';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat';\nimport Metadata, { getCountryCallingCode } from './metadata';\nimport getIddPrefix from './helpers/getIddPrefix';\nimport { formatRFC3966 } from './helpers/RFC3966';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  } // Formats a phone number\n  //\n  // Example use cases:\n  //\n  // ```js\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n  // formatNumber('+78005553535', 'NATIONAL')\n  // formatNumber('+78005553535', 'NATIONAL', metadata)\n  // ```\n  //\n\n};\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread({}, DEFAULT_OPTIONS, options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\n\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = availableFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var format = _ref;\n\n    // Validate leading digits\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formattedNumber;\n  }\n\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}\n//# sourceMappingURL=format_.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './helpers/getNumberType';\nimport formatNumber from './format_';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber =\n/*#__PURE__*/\nfunction () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    var _metadata = new Metadata(metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread({}, options, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\n//# sourceMappingURL=PhoneNumber.js.map","import Metadata from './metadata';\nimport matchesEntirely from './helpers/matchesEntirely';\nimport getNumberType from './helpers/getNumberType';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","import Metadata from '../metadata';\nimport { VALID_DIGITS } from '../constants';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}\n//# sourceMappingURL=stripIddPrefix.js.map","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`.\r\n */\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,\n        // then carrier code is the second one.\n\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n          // `prefixBeforeNationalNumber` is the whole substring matched by\n          // the `national_prefix_for_parsing` regular expression.\n          // There seem to be no guarantees that it's just a national prefix.\n          // For example, if there's a carrier code, it's gonna be a\n          // part of `prefixBeforeNationalNumber` too.\n          var prefixBeforeNationalNumber = prefixMatch[0];\n          nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,\n          // then carrier code is the first one.\n\n          if (hasCapturedGroups) {\n            carrierCode = prefixMatch[1];\n          }\n        } // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n\n\n      var nationalPrefix;\n\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}\n//# sourceMappingURL=extractNationalNumberFromPossiblyIncompleteNumber.js.map","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber';\nimport matchesEntirely from './matchesEntirely';\nimport checkNumberLength from './checkNumberLength';\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nexport default function extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode;\n\n  if (!shouldExtractNationalPrefix(number, nationalNumber, metadata)) {\n    // Don't strip the national prefix.\n    return {\n      nationalNumber: number\n    };\n  } // If a national prefix has been extracted, check to see\n  // if the resultant number isn't too short.\n  // Same code in Google's `libphonenumber`:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3291-L3302\n  // For some reason, they do this check right after the `national_number_pattern` check\n  // this library does in `shouldExtractNationalPrefix()` function.\n  // Why is there a second \"resultant\" number validity check?\n  // They don't provide an explanation.\n  // This library just copies the behavior.\n\n\n  if (number.length !== nationalNumber.length + (carrierCode ? carrierCode.length : 0)) {\n    // If not using legacy generated metadata (before version `1.0.18`)\n    // then it has \"possible lengths\", so use those to validate the number length.\n    if (metadata.possibleLengths()) {\n      // \"We require that the NSN remaining after stripping the national prefix and\n      // carrier code be long enough to be a possible length for the region.\n      // Otherwise, we don't do the stripping, since the original number could be\n      // a valid short number.\"\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      switch (checkNumberLength(nationalNumber, metadata)) {\n        case 'TOO_SHORT':\n        case 'INVALID_LENGTH':\n          // case 'IS_POSSIBLE_LOCAL_ONLY':\n          // Don't strip the national prefix.\n          return {\n            nationalNumber: number\n          };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\n\nfunction shouldExtractNationalPrefix(number, nationalSignificantNumber, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (matchesEntirely(number, metadata.nationalNumberPattern()) && !matchesEntirely(nationalSignificantNumber, metadata.nationalNumberPattern())) {\n    return false;\n  } // Just \"possible\" number check would be more relaxed, so it's not used.\n  // if (isPossibleNumber(number, metadata) &&\n  // \t!isPossibleNumber(numberWithNationalPrefixExtracted, metadata)) {\n  // \treturn false\n  // }\n\n\n  return true;\n}\n//# sourceMappingURL=extractNationalNumber.js.map","import Metadata from '../metadata';\nimport matchesEntirely from './matchesEntirely';\nimport extractNationalNumber from './extractNationalNumber';\nimport checkNumberLength from './checkNumberLength';\nimport getCountryCallingCode from '../getCountryCallingCode';\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n\n    var _extractNationalNumbe2 = extractNationalNumber(number, metadata),\n        nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}\n//# sourceMappingURL=extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js.map","import stripIddPrefix from './stripIddPrefix';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign';\nimport Metadata from '../metadata';\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants';\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport default function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin.countryCallingCode,\n            shorterNumber = _extractCountryCallin.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}\n//# sourceMappingURL=extractCountryCallingCode.js.map","import Metadata from '../metadata';\nimport getNumberType from './getNumberType';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country = _ref;\n    metadata.country(country); // Leading digits check would be the simplest one\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n        phone: nationalPhoneNumber,\n        country: country\n      }, undefined, metadata.metadata)) {\n        return country;\n      }\n  }\n}\n//# sourceMappingURL=getCountryByCallingCode.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN } from './constants';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './helpers/isViablePhoneNumber';\nimport extractExtension from './helpers/extension/extractExtension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport { isPossibleNumber } from './isPossibleNumber_';\nimport { parseRFC3966 } from './helpers/RFC3966';\nimport PhoneNumber from './PhoneNumber';\nimport matchesEntirely from './helpers/matchesEntirely';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign';\nimport extractNationalNumber from './helpers/extractNationalNumber';\nimport stripIddPrefix from './helpers/stripIddPrefix';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  } // isInternational: countryCallingCode !== undefined\n\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} throwOnError — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nexport function extractFormattedPhoneNumber(text, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nfunction parseInput(text, v2) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return parseRFC3966(text);\n  }\n\n  var number = extractFormattedPhoneNumber(text, v2); // If the phone number is not viable, then abort.\n\n  if (!number || !isViablePhoneNumber(number)) {\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = extractExtension(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  } // If `formattedPhoneNumber` is in \"national\" format\n  // then `number` is defined and `countryCallingCode` isn't.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n      metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n      if (defaultCountry) {\n        country = defaultCountry;\n      } else {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            country = '001';\n          }\n        }\n      }\n\n      countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n    } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n//# sourceMappingURL=parse_.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parseNumber from './parse_';\nexport default function parsePhoneNumber(text, options, metadata) {\n  return parseNumber(text, _objectSpread({}, options, {\n    v2: true\n  }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumber_(text, options, metadata);\n}\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n      if (arg_3) {\n        options = arg_2;\n        metadata = arg_3;\n      } else {\n        metadata = arg_2;\n      }\n    } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _objectSpread({}, options, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return parsePhoneNumber(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {//\n    } else {\n      throw error;\n    }\n  }\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","import { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_';\nexport default function parsePhoneNumberFromString() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumberFromString_(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberFromString.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar AsYouTypeState =\n/*#__PURE__*/\nfunction () {\n  function AsYouTypeState(_ref) {\n    var _this = this;\n\n    var onCountryChange = _ref.onCountryChange,\n        onCallingCodeChange = _ref.onCallingCodeChange;\n\n    _classCallCheck(this, AsYouTypeState);\n\n    _defineProperty(this, \"update\", function (properties) {\n      for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        _this[key] = properties[key];\n      }\n    });\n\n    this.onCountryChange = onCountryChange;\n    this.onCallingCodeChange = onCallingCodeChange;\n  }\n\n  _createClass(AsYouTypeState, [{\n    key: \"reset\",\n    value: function reset(defaultCountry, defaultCallingCode) {\n      this.international = false;\n      this.IDDPrefix = undefined;\n      this.missingPlus = undefined;\n      this.callingCode = undefined;\n      this.digits = '';\n      this.resetNationalSignificantNumber();\n      this.initCountryAndCallingCode(defaultCountry, defaultCallingCode);\n    }\n  }, {\n    key: \"resetNationalSignificantNumber\",\n    value: function resetNationalSignificantNumber() {\n      this.nationalSignificantNumber = this.getNationalDigits();\n      this.nationalSignificantNumberMatchesInput = true;\n      this.nationalPrefix = undefined;\n      this.carrierCode = undefined;\n      this.complexPrefixBeforeNationalSignificantNumber = undefined;\n    }\n  }, {\n    key: \"initCountryAndCallingCode\",\n    value: function initCountryAndCallingCode(country, callingCode) {\n      this.setCountry(country);\n      this.setCallingCode(callingCode);\n    }\n  }, {\n    key: \"setCountry\",\n    value: function setCountry(country) {\n      this.country = country;\n      this.onCountryChange(country);\n    }\n  }, {\n    key: \"setCallingCode\",\n    value: function setCallingCode(callingCode) {\n      this.callingCode = callingCode;\n      return this.onCallingCodeChange(this.country, callingCode);\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber() {\n      // Prepend the `+` to parsed input.\n      this.international = true; // If a default country was set then reset it\n      // because an explicitly international phone\n      // number is being entered.\n\n      this.initCountryAndCallingCode();\n    }\n  }, {\n    key: \"appendDigits\",\n    value: function appendDigits(nextDigits) {\n      this.digits += nextDigits;\n    }\n  }, {\n    key: \"appendNationalSignificantNumberDigits\",\n    value: function appendNationalSignificantNumberDigits(nextDigits) {\n      this.nationalSignificantNumber += nextDigits;\n    }\n    /**\r\n     * Returns the part of `this.digits` that corresponds to the national number.\r\n     * Basically, all digits that have been input by the user, except for the\r\n     * international prefix and the country calling code part\r\n     * (if the number is an international one).\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getNationalDigits\",\n    value: function getNationalDigits() {\n      if (this.international) {\n        return this.digits.slice((this.IDDPrefix ? this.IDDPrefix.length : 0) + (this.callingCode ? this.callingCode.length : 0));\n      }\n\n      return this.digits;\n    }\n  }, {\n    key: \"getDigitsWithoutInternationalPrefix\",\n    value: function getDigitsWithoutInternationalPrefix() {\n      if (this.international) {\n        if (this.IDDPrefix) {\n          return this.digits.slice(this.IDDPrefix.length);\n        }\n      }\n\n      return this.digits;\n    }\n  }]);\n\n  return AsYouTypeState;\n}();\n\nexport { AsYouTypeState as default };\n//# sourceMappingURL=AsYouTypeState.js.map","// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nexport function countOccurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nexport function repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\n  if (string[cutBeforeIndex] === ')') {\n    cutBeforeIndex++;\n  }\n\n  return stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\nexport function closeNonPairedParens(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = countOccurences('(', retained_template);\n  var closing_braces = countOccurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n}\nexport function stripNonPairedParens(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _i2 = 0, _dangling_braces = dangling_braces; _i2 < _dangling_braces.length; _i2++) {\n    var index = _dangling_braces[_i2];\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\nexport function populateTemplateWithDigits(template, position, digits) {\n  // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for `digits` it is safe.\n  // for (const digit of digits)\n  for (var _iterator2 = digits.split(''), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n    var _ref2;\n\n    if (_isArray2) {\n      if (_i3 >= _iterator2.length) break;\n      _ref2 = _iterator2[_i3++];\n    } else {\n      _i3 = _iterator2.next();\n      if (_i3.done) break;\n      _ref2 = _i3.value;\n    }\n\n    var digit = _ref2;\n\n    // If there is room for more digits in current `template`,\n    // then set the next digit in the `template`,\n    // and return the formatted digits so far.\n    // If more digits are entered than the current format could handle.\n    if (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n      return;\n    }\n\n    position = template.search(DIGIT_PLACEHOLDER_MATCHER);\n    template = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n  }\n\n  return [template, position];\n}\n//# sourceMappingURL=AsYouTypeFormatter.util.js.map","import checkNumberLength from './helpers/checkNumberLength';\nimport parseDigits from './helpers/parseDigits';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat';\nexport default function formatCompleteNumber(state, format, _ref) {\n  var metadata = _ref.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref.getSeparatorAfterNationalPrefix;\n  var matcher = new RegExp(\"^(?:\".concat(format.pattern(), \")$\"));\n\n  if (matcher.test(state.nationalSignificantNumber)) {\n    return formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\n      metadata: metadata,\n      shouldTryNationalPrefixFormattingRule: shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix\n    });\n  }\n}\nexport function canFormatCompleteNumber(nationalSignificantNumber, metadata) {\n  return checkNumberLength(nationalSignificantNumber, metadata) === 'IS_POSSIBLE';\n}\n\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, _ref2) {\n  var metadata = _ref2.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref2.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref2.getSeparatorAfterNationalPrefix;\n  // `format` has already been checked for `nationalPrefix` requirement.\n  var nationalSignificantNumber = state.nationalSignificantNumber,\n      international = state.international,\n      nationalPrefix = state.nationalPrefix,\n      carrierCode = state.carrierCode; // Format the number with using `national_prefix_formatting_rule`.\n  // If the resulting formatted number is a valid formatted number, then return it.\n  //\n  // Google's AsYouType formatter is different in a way that it doesn't try\n  // to format using the \"national prefix formatting rule\", and instead it\n  // simply prepends a national prefix followed by a \" \" character.\n  // This code does that too, but as a fallback.\n  // The reason is that \"national prefix formatting rule\" may use parentheses,\n  // which wouldn't be included has it used the simpler Google's way.\n  //\n\n  if (shouldTryNationalPrefixFormattingRule(format)) {\n    var formattedNumber = formatNationalNumber(state, format, {\n      useNationalPrefixFormattingRule: true,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n      metadata: metadata\n    });\n\n    if (formattedNumber) {\n      return formattedNumber;\n    }\n  } // Format the number without using `national_prefix_formatting_rule`.\n\n\n  return formatNationalNumber(state, format, {\n    useNationalPrefixFormattingRule: false,\n    getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n    metadata: metadata\n  });\n}\n\nfunction formatNationalNumber(state, format, _ref3) {\n  var metadata = _ref3.metadata,\n      useNationalPrefixFormattingRule = _ref3.useNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref3.getSeparatorAfterNationalPrefix;\n  var formattedNationalNumber = formatNationalNumberUsingFormat(state.nationalSignificantNumber, format, {\n    carrierCode: state.carrierCode,\n    useInternationalFormat: state.international,\n    withNationalPrefix: useNationalPrefixFormattingRule,\n    metadata: metadata\n  });\n\n  if (!useNationalPrefixFormattingRule) {\n    if (state.nationalPrefix) {\n      // If a national prefix was extracted, then just prepend it,\n      // followed by a \" \" character.\n      formattedNationalNumber = state.nationalPrefix + getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n    } else if (state.complexPrefixBeforeNationalSignificantNumber) {\n      formattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber + ' ' + formattedNationalNumber;\n    }\n  }\n\n  if (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\n    return formattedNationalNumber;\n  }\n} // Check that the formatted phone number contains exactly\n// the same digits that have been input by the user.\n// For example, when \"0111523456789\" is input for `AR` country,\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\n// which means that the national part of `this.digits` isn't simply equal to\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\n//\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\n// being formatted via `metadata[country].national_prefix_transform_rule`.\n// For example, for `VI` country, it prepends `340` to the national number,\n// and if this check hasn't been implemented, then there would be a bug\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\n//\n// So, all these \"gotchas\" are filtered out.\n//\n// In the original Google's code, the comments say:\n// \"Check that we didn't remove nor add any extra digits when we matched\n// this formatting pattern. This usually happens after we entered the last\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n// formatted but AYTF should retain all the number entered and not change\n// in order to match a format (of same leading digits and length) display\n// in that way.\"\n// \"If it's the same (i.e entered number and format is same), then it's\n// safe to return this in formatted number as nothing is lost / added.\"\n// Otherwise, don't use this format.\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n//\n\n\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\n  return parseDigits(formattedNationalNumber) === state.getNationalDigits();\n}\n//# sourceMappingURL=AsYouTypeFormatter.complete.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { DIGIT_PLACEHOLDER, countOccurences, repeat, cutAndStripNonPairedParens, closeNonPairedParens, stripNonPairedParens, populateTemplateWithDigits } from './AsYouTypeFormatter.util';\nimport formatCompleteNumber, { canFormatCompleteNumber } from './AsYouTypeFormatter.complete';\nimport parseDigits from './helpers/parseDigits';\nexport { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.util';\nimport { FIRST_GROUP_PATTERN } from './helpers/formatNationalNumberUsingFormat';\nimport { VALID_PUNCTUATION } from './constants';\nimport applyInternationalSeparatorStyle from './helpers/applyInternationalSeparatorStyle'; // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\n\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A regular expression that is used to determine if a `format` is\n// suitable to be used in the \"as you type formatter\".\n// A `format` is suitable when the resulting formatted number has\n// the same digits as the user has entered.\n//\n// In the simplest case, that would mean that the format\n// doesn't add any additional digits when formatting a number.\n// Google says that it also shouldn't add \"star\" (`*`) characters,\n// like it does in some Israeli formats.\n// Such basic format would only contain \"valid punctuation\"\n// and \"captured group\" identifiers ($1, $2, etc).\n//\n// An example of a format that adds additional digits:\n//\n// Country: `AR` (Argentina).\n// Format:\n// {\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n//    \"leading_digits_patterns\": [\"91\"],\n//    \"national_prefix_formatting_rule\": \"0$1\",\n//    \"format\": \"$2 15-$3-$4\",\n//    \"international_format\": \"$1 $2 $3-$4\"\n// }\n//\n// In the format above, the `format` adds `15` to the digits when formatting a number.\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\n// has previously removed `15` from a national number, so re-adding `15` in `format`\n// doesn't actually result in any extra digits added to user's input.\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\n//\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\n// `libphonenumber` code.\n//\n\n\nvar NON_ALTERING_FORMAT_REG_EXP = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar AsYouTypeFormatter =\n/*#__PURE__*/\nfunction () {\n  function AsYouTypeFormatter(_ref) {\n    var _this = this;\n\n    var state = _ref.state,\n        metadata = _ref.metadata;\n\n    _classCallCheck(this, AsYouTypeFormatter);\n\n    _defineProperty(this, \"getSeparatorAfterNationalPrefix\", function (format) {\n      // `US` metadata doesn't have a `national_prefix_formatting_rule`,\n      // so the `if` condition below doesn't apply to `US`,\n      // but in reality there shoudl be a separator\n      // between a national prefix and a national (significant) number.\n      // So `US` national prefix separator is a \"special\" \"hardcoded\" case.\n      if (_this.isNANP) {\n        return ' ';\n      } // If a `format` has a `national_prefix_formatting_rule`\n      // and that rule has a separator after a national prefix,\n      // then it means that there should be a separator\n      // between a national prefix and a national (significant) number.\n\n\n      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n        return ' ';\n      } // At this point, there seems to be no clear evidence that\n      // there should be a separator between a national prefix\n      // and a national (significant) number. So don't insert one.\n\n\n      return '';\n    });\n\n    _defineProperty(this, \"shouldTryNationalPrefixFormattingRule\", function (format, _ref2) {\n      var international = _ref2.international,\n          nationalPrefix = _ref2.nationalPrefix;\n\n      if (format.nationalPrefixFormattingRule()) {\n        // In some countries, `national_prefix_formatting_rule` is `($1)`,\n        // so it applies even if the user hasn't input a national prefix.\n        // `format.usesNationalPrefix()` detects such cases.\n        var usesNationalPrefix = format.usesNationalPrefix();\n\n        if (usesNationalPrefix && nationalPrefix || !usesNationalPrefix && !international) {\n          return true;\n        }\n      }\n    });\n\n    this.metadata = metadata;\n    this.resetFormat();\n  }\n\n  _createClass(AsYouTypeFormatter, [{\n    key: \"resetFormat\",\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.nationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplatePosition = -1;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan, state) {\n      this.resetFormat();\n\n      if (numberingPlan) {\n        this.isNANP = numberingPlan.callingCode() === '1';\n        this.matchingFormats = numberingPlan.formats();\n\n        if (state.nationalSignificantNumber) {\n          this.narrowDownMatchingFormats(state);\n        }\n      } else {\n        this.isNANP = undefined;\n        this.matchingFormats = [];\n      }\n    }\n  }, {\n    key: \"format\",\n    value: function format(nextDigits, state) {\n      var _this2 = this;\n\n      // See if the phone number digits can be formatted as a complete phone number.\n      // If not, use the results from `formatNationalNumberWithNextDigits()`,\n      // which formats based on the chosen formatting pattern.\n      //\n      // Attempting to format complete phone number first is how it's done\n      // in Google's `libphonenumber`, so this library just follows it.\n      // Google's `libphonenumber` code doesn't explain in detail why does it\n      // attempt to format digits as a complete phone number\n      // instead of just going with a previoulsy (or newly) chosen `format`:\n      //\n      // \"Checks to see if there is an exact pattern match for these digits.\n      //  If so, we should use this instead of any other formatting template\n      //  whose leadingDigitsPattern also matches the input.\"\n      //\n      if (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\n        for (var _iterator = this.matchingFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref3;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref3 = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref3 = _i.value;\n          }\n\n          var format = _ref3;\n          var formattedCompleteNumber = formatCompleteNumber(state, format, {\n            metadata: this.metadata,\n            shouldTryNationalPrefixFormattingRule: function shouldTryNationalPrefixFormattingRule(format) {\n              return _this2.shouldTryNationalPrefixFormattingRule(format, {\n                international: state.international,\n                nationalPrefix: state.nationalPrefix\n              });\n            },\n            getSeparatorAfterNationalPrefix: this.getSeparatorAfterNationalPrefix\n          });\n\n          if (formattedCompleteNumber) {\n            this.resetFormat();\n            this.chosenFormat = format;\n            this.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state);\n            this.populatedNationalNumberTemplate = formattedCompleteNumber; // With a new formatting template, the matched position\n            // using the old template needs to be reset.\n\n            this.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER);\n            return formattedCompleteNumber;\n          }\n        }\n      } // Format the digits as a partial (incomplete) phone number\n      // using the previously chosen formatting pattern (or a newly chosen one).\n\n\n      return this.formatNationalNumberWithNextDigits(nextDigits, state);\n    } // Formats the next phone number digits.\n\n  }, {\n    key: \"formatNationalNumberWithNextDigits\",\n    value: function formatNationalNumberWithNextDigits(nextDigits, state) {\n      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.\n\n      var newlyChosenFormat = this.chooseFormat(state);\n\n      if (newlyChosenFormat) {\n        if (newlyChosenFormat === previouslyChosenFormat) {\n          // If it can format the next (current) digits\n          // using the previously chosen phone number format\n          // then return the updated formatted number.\n          return this.formatNextNationalNumberDigits(nextDigits);\n        } else {\n          // If a more appropriate phone number format\n          // has been chosen for these \"leading digits\",\n          // then re-format the national phone number part\n          // using the newly selected format.\n          return this.formatNextNationalNumberDigits(state.getNationalDigits());\n        }\n      }\n    }\n  }, {\n    key: \"narrowDownMatchingFormats\",\n    value: function narrowDownMatchingFormats(_ref4) {\n      var _this3 = this;\n\n      var nationalSignificantNumber = _ref4.nationalSignificantNumber,\n          nationalPrefix = _ref4.nationalPrefix,\n          international = _ref4.international;\n      var leadingDigits = nationalSignificantNumber; // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digit patterns already match for a single first digit.\n\n      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n\n      if (leadingDigitsPatternIndex < 0) {\n        leadingDigitsPatternIndex = 0;\n      }\n\n      this.matchingFormats = this.matchingFormats.filter(function (format) {\n        return _this3.formatSuits(format, international, nationalPrefix) && _this3.formatMatches(format, leadingDigits, leadingDigitsPatternIndex);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: \"formatSuits\",\n    value: function formatSuits(format, international, nationalPrefix) {\n      // When a prefix before a national (significant) number is\n      // simply a national prefix, then it's parsed as `this.nationalPrefix`.\n      // In more complex cases, a prefix before national (significant) number\n      // could include a national prefix as well as some \"capturing groups\",\n      // and in that case there's no info whether a national prefix has been parsed.\n      // If national prefix is not used when formatting a phone number\n      // using this format, but a national prefix has been entered by the user,\n      // and was extracted, then discard such phone number format.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\n      if (nationalPrefix && !format.usesNationalPrefix() && // !format.domesticCarrierCodeFormattingRule() &&\n      !format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\n        return false;\n      } // If national prefix is mandatory for this phone number format\n      // and there're no guarantees that a national prefix is present in user input\n      // then discard this phone number format as not suitable.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\n\n\n      if (!international && !nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"formatMatches\",\n    value: function formatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\n      var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n      // leading digits pattern then it fits.\n\n      if (leadingDigitsPatternsCount === 0) {\n        return true;\n      } // Start excluding any non-matching formats only when the\n      // national number entered so far is at least 3 digits long,\n      // otherwise format matching would give false negatives.\n      // For example, when the digits entered so far are `2`\n      // and the leading digits pattern is `21` –\n      // it's quite obvious in this case that the format could be the one\n      // but due to the absence of further digits it would give false negative.\n\n\n      if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n        return true;\n      } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n      // then format matching starts narrowing down the list of possible formats\n      // (only previously matched formats are considered for next digits).\n\n\n      leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n      var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Brackets are required for `^` to be applied to\n      // all or-ed (`|`) parts, not just the first one.\n\n      return new RegExp(\"^(\".concat(leadingDigitsPattern, \")\")).test(leadingDigits);\n    }\n  }, {\n    key: \"getFormatFormat\",\n    value: function getFormatFormat(format, international) {\n      return international ? format.internationalFormat() : format.format();\n    }\n  }, {\n    key: \"chooseFormat\",\n    value: function chooseFormat(state) {\n      var _this4 = this;\n\n      var _loop2 = function _loop2() {\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) return \"break\";\n          _ref5 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) return \"break\";\n          _ref5 = _i2.value;\n        }\n\n        var format = _ref5;\n\n        // If this format is currently being used\n        // and is still suitable, then stick to it.\n        if (_this4.chosenFormat === format) {\n          return \"break\";\n        } // Sometimes, a formatting rule inserts additional digits in a phone number,\n        // and \"as you type\" formatter can't do that: it should only use the digits\n        // that the user has input.\n        //\n        // For example, in Argentina, there's a format for mobile phone numbers:\n        //\n        // {\n        //    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n        //    \"leading_digits_patterns\": [\"91\"],\n        //    \"national_prefix_formatting_rule\": \"0$1\",\n        //    \"format\": \"$2 15-$3-$4\",\n        //    \"international_format\": \"$1 $2 $3-$4\"\n        // }\n        //\n        // In that format, `international_format` is used instead of `format`\n        // because `format` inserts `15` in the formatted number,\n        // and `AsYouType` formatter should only use the digits\n        // the user has actually input, without adding any extra digits.\n        // In this case, it wouldn't make a difference, because the `15`\n        // is first stripped when applying `national_prefix_for_parsing`\n        // and then re-added when using `format`, so in reality it doesn't\n        // add any new digits to the number, but to detect that, the code\n        // would have to be more complex: it would have to try formatting\n        // the digits using the format and then see if any digits have\n        // actually been added or removed, and then, every time a new digit\n        // is input, it should re-check whether the chosen format doesn't\n        // alter the digits.\n        //\n        // Google's code doesn't go that far, and so does this library:\n        // it simply requires that a `format` doesn't add any additonal\n        // digits to user's input.\n        //\n        // Also, people in general should move from inputting phone numbers\n        // in national format (possibly with national prefixes)\n        // and use international phone number format instead:\n        // it's a logical thing in the modern age of mobile phones,\n        // globalization and the internet.\n        //\n\n        /* istanbul ignore if */\n\n\n        if (!NON_ALTERING_FORMAT_REG_EXP.test(_this4.getFormatFormat(format, state.international))) {\n          return \"continue\";\n        }\n\n        if (!_this4.createTemplateForFormat(format, state)) {\n          // Remove the format if it can't generate a template.\n          _this4.matchingFormats = _this4.matchingFormats.filter(function (_) {\n            return _ !== format;\n          });\n          return \"continue\";\n        }\n\n        _this4.chosenFormat = format;\n        return \"break\";\n      };\n\n      // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n      _loop: for (var _iterator2 = this.matchingFormats.slice(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref5;\n\n        var _ret = _loop2();\n\n        switch (_ret) {\n          case \"break\":\n            break _loop;\n\n          case \"continue\":\n            continue;\n        }\n      }\n\n      if (!this.chosenFormat) {\n        // No format matches the national (significant) phone number.\n        this.resetFormat();\n      }\n\n      return this.chosenFormat;\n    }\n  }, {\n    key: \"createTemplateForFormat\",\n    value: function createTemplateForFormat(format, state) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n\n      var template = this.getTemplateForFormat(format, state); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (template) {\n        this.setNationalNumberTemplate(template, state);\n        return true;\n      }\n    }\n  }, {\n    key: \"getInternationalPrefixBeforeCountryCallingCode\",\n    value: function getInternationalPrefixBeforeCountryCallingCode(_ref6, options) {\n      var IDDPrefix = _ref6.IDDPrefix,\n          missingPlus = _ref6.missingPlus;\n\n      if (IDDPrefix) {\n        return options && options.spacing === false ? IDDPrefix : IDDPrefix + ' ';\n      }\n\n      if (missingPlus) {\n        return '';\n      }\n\n      return '+';\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate(state) {\n      if (!this.template) {\n        return;\n      } // `this.template` holds the template for a \"complete\" phone number.\n      // The currently entered phone number is most likely not \"complete\",\n      // so trim all non-populated digits.\n\n\n      var index = -1;\n      var i = 0;\n      var internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, {\n        spacing: false\n      }) : '';\n\n      while (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n\n      return cutAndStripNonPairedParens(this.template, index + 1);\n    }\n  }, {\n    key: \"setNationalNumberTemplate\",\n    value: function setNationalNumberTemplate(template, state) {\n      this.nationalNumberTemplate = template;\n      this.populatedNationalNumberTemplate = template; // With a new formatting template, the matched position\n      // using the old template needs to be reset.\n\n      this.populatedNationalNumberTemplatePosition = -1; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (state.international) {\n        this.template = this.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) + repeat(DIGIT_PLACEHOLDER, state.callingCode.length) + ' ' + template;\n      } else {\n        this.template = template;\n      }\n    }\n    /**\r\n     * Generates formatting template for a national phone number,\r\n     * optionally containing a national prefix, for a format.\r\n     * @param  {Format} format\r\n     * @param  {string} nationalPrefix\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplateForFormat\",\n    value: function getTemplateForFormat(format, _ref7) {\n      var nationalSignificantNumber = _ref7.nationalSignificantNumber,\n          international = _ref7.international,\n          nationalPrefix = _ref7.nationalPrefix,\n          complexPrefixBeforeNationalSignificantNumber = _ref7.complexPrefixBeforeNationalSignificantNumber;\n      var pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        pattern = pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // Generate a dummy national number (consisting of `9`s)\n      // that fits this format's `pattern`.\n      //\n      // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n      //\n\n\n      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (nationalSignificantNumber.length > digits.length) {\n        return;\n      } // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strictPattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strictPattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalSignificantNumber : `111111111` (9 digits)\n      //\n      // pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // format : `$1 $2 $3`\n      // digits : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `pattern`.\n      //\n      // The fix is, if `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then `this.nationalSignificantNumber`\n      // is used instead of `digits`.\n\n\n      var strictPattern = new RegExp('^' + pattern + '$');\n      var nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then use it\n      // instead of `digits`.\n\n      if (strictPattern.test(nationalNumberDummyDigits)) {\n        digits = nationalNumberDummyDigits;\n      }\n\n      var numberFormat = this.getFormatFormat(format, international);\n      var nationalPrefixIncludedInTemplate; // If a user did input a national prefix (and that's guaranteed),\n      // and if a `format` does have a national prefix formatting rule,\n      // then see if that national prefix formatting rule\n      // prepends exactly the same national prefix the user has input.\n      // If that's the case, then use the `format` with the national prefix formatting rule.\n      // Otherwise, use  the `format` without the national prefix formatting rule,\n      // and prepend a national prefix manually to it.\n\n      if (this.shouldTryNationalPrefixFormattingRule(format, {\n        international: international,\n        nationalPrefix: nationalPrefix\n      })) {\n        var numberFormatWithNationalPrefix = numberFormat.replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()); // If `national_prefix_formatting_rule` of a `format` simply prepends\n        // national prefix at the start of a national (significant) number,\n        // then such formatting can be used with `AsYouType` formatter.\n        // There seems to be no `else` case: everywhere in metadata,\n        // national prefix formatting rule is national prefix + $1,\n        // or `($1)`, in which case such format isn't even considered\n        // when the user has input a national prefix.\n\n        /* istanbul ignore else */\n\n        if (parseDigits(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + parseDigits('$1')) {\n          numberFormat = numberFormatWithNationalPrefix;\n          nationalPrefixIncludedInTemplate = true; // Replace all digits of the national prefix in the formatting template\n          // with `DIGIT_PLACEHOLDER`s.\n\n          if (nationalPrefix) {\n            var i = nationalPrefix.length;\n\n            while (i > 0) {\n              numberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n              i--;\n            }\n          }\n        }\n      } // Generate formatting template for this phone number format.\n\n\n      var template = digits // Format the dummy phone number according to the format.\n      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER); // If a prefix of a national (significant) number is not as simple\n      // as just a basic national prefix, then just prepend such prefix\n      // before the national (significant) number, optionally spacing\n      // the two with a whitespace.\n\n      if (!nationalPrefixIncludedInTemplate) {\n        if (complexPrefixBeforeNationalSignificantNumber) {\n          // Prepend the prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) + ' ' + template;\n        } else if (nationalPrefix) {\n          // Prepend national prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n        }\n      }\n\n      if (international) {\n        template = applyInternationalSeparatorStyle(template);\n      }\n\n      return template;\n    }\n  }, {\n    key: \"formatNextNationalNumberDigits\",\n    value: function formatNextNationalNumberDigits(digits) {\n      var result = populateTemplateWithDigits(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition, digits);\n\n      if (!result) {\n        // Reset the format.\n        this.resetFormat();\n        return;\n      }\n\n      this.populatedNationalNumberTemplate = result[0];\n      this.populatedNationalNumberTemplatePosition = result[1]; // Return the formatted phone number so far.\n\n      return cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n      // \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n    }\n  }]);\n\n  return AsYouTypeFormatter;\n}();\n\nexport { AsYouTypeFormatter as default };\n//# sourceMappingURL=AsYouTypeFormatter.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport _extractCountryCallingCode from './helpers/extractCountryCallingCode';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign';\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber';\nimport stripIddPrefix from './helpers/stripIddPrefix';\nimport parseDigits from './helpers/parseDigits';\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+';\nvar VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_PART + '$', 'i');\nvar VALID_PHONE_NUMBER = '(?:' + '[' + PLUS_CHARS + ']' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*' + '|' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + ')';\nvar AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + '.*' + '$'); // Tests whether `national_prefix_for_parsing` could match\n// different national prefixes.\n// Matches anything that's not a digit or a square bracket.\n\nvar COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/;\n\nvar AsYouTypeParser =\n/*#__PURE__*/\nfunction () {\n  function AsYouTypeParser(_ref) {\n    var defaultCountry = _ref.defaultCountry,\n        defaultCallingCode = _ref.defaultCallingCode,\n        metadata = _ref.metadata,\n        onNationalSignificantNumberChange = _ref.onNationalSignificantNumberChange;\n\n    _classCallCheck(this, AsYouTypeParser);\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.metadata = metadata;\n    this.onNationalSignificantNumberChange = onNationalSignificantNumberChange;\n  }\n\n  _createClass(AsYouTypeParser, [{\n    key: \"input\",\n    value: function input(text, state) {\n      var _extractFormattedDigi = extractFormattedDigitsAndPlus(text),\n          _extractFormattedDigi2 = _slicedToArray(_extractFormattedDigi, 2),\n          formattedDigits = _extractFormattedDigi2[0],\n          hasPlus = _extractFormattedDigi2[1];\n\n      var digits = parseDigits(formattedDigits); // Checks for a special case: just a leading `+` has been entered.\n\n      var justLeadingPlus;\n\n      if (hasPlus) {\n        if (!state.digits) {\n          state.startInternationalNumber();\n\n          if (!digits) {\n            justLeadingPlus = true;\n          }\n        }\n      }\n\n      if (digits) {\n        this.inputDigits(digits, state);\n      }\n\n      return {\n        digits: digits,\n        justLeadingPlus: justLeadingPlus\n      };\n    }\n    /**\r\n     * Inputs \"next\" phone number digits.\r\n     * @param  {string} digits\r\n     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n     */\n\n  }, {\n    key: \"inputDigits\",\n    value: function inputDigits(nextDigits, state) {\n      var digits = state.digits;\n      var hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3; // Append phone number digits.\n\n      state.appendDigits(nextDigits); // Attempt to extract IDD prefix:\n      // Some users input their phone number in international format,\n      // but in an \"out-of-country\" dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers as soon as there're at least 3 digits.\n      // Google's library attempts to extract IDD prefix at 3 digits,\n      // so this library just copies that behavior.\n      // I guess that's because the most commot IDD prefixes are\n      // `00` (Europe) and `011` (US).\n      // There exist really long IDD prefixes too:\n      // for example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      // An IDD prefix is extracted here, and then every time when\n      // there's a new digit and the number couldn't be formatted.\n\n      if (hasReceivedThreeLeadingDigits) {\n        this.extractIddPrefix(state);\n      }\n\n      if (this.isWaitingForCountryCallingCode(state)) {\n        if (!this.extractCountryCallingCode(state)) {\n          return;\n        }\n      } else {\n        state.appendNationalSignificantNumberDigits(nextDigits);\n      } // If a phone number is being input in international format,\n      // then it's not valid for it to have a national prefix.\n      // Still, some people incorrectly input such numbers with a national prefix.\n      // In such cases, only attempt to strip a national prefix if the number becomes too long.\n      // (but that is done later, not here)\n\n\n      if (!state.international) {\n        if (!this.hasExtractedNationalSignificantNumber) {\n          this.extractNationalSignificantNumber(state.getNationalDigits(), state.update);\n        }\n      }\n    }\n  }, {\n    key: \"isWaitingForCountryCallingCode\",\n    value: function isWaitingForCountryCallingCode(_ref2) {\n      var international = _ref2.international,\n          callingCode = _ref2.callingCode;\n      return international && !callingCode;\n    } // Extracts a country calling code from a number\n    // being entered in internatonal format.\n\n  }, {\n    key: \"extractCountryCallingCode\",\n    value: function extractCountryCallingCode(state) {\n      var _extractCountryCallin = _extractCountryCallingCode('+' + state.getDigitsWithoutInternationalPrefix(), this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      if (countryCallingCode) {\n        state.setCallingCode(countryCallingCode);\n        state.update({\n          nationalSignificantNumber: number\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan) {\n      if (numberingPlan) {\n        this.hasSelectedNumberingPlan = true;\n\n        var nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing();\n\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing);\n      } else {\n        this.hasSelectedNumberingPlan = undefined;\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = undefined;\n      }\n    }\n    /**\r\n     * Extracts a national (significant) number from user input.\r\n     * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n     * and doesn't apply `national_prefix_transform_rule` after that.\r\n     * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n     * @return {boolean} [extracted]\r\n     */\n\n  }, {\n    key: \"extractNationalSignificantNumber\",\n    value: function extractNationalSignificantNumber(nationalDigits, setState) {\n      if (!this.hasSelectedNumberingPlan) {\n        return;\n      }\n\n      var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe.nationalPrefix,\n          nationalNumber = _extractNationalNumbe.nationalNumber,\n          carrierCode = _extractNationalNumbe.carrierCode;\n\n      if (nationalNumber === nationalDigits) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n    /**\r\n     * In Google's code this function is called \"attempt to extract longer NDD\".\r\n     * \"Some national prefixes are a substring of others\", they say.\r\n     * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n     */\n\n  }, {\n    key: \"extractAnotherNationalSignificantNumber\",\n    value: function extractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\n      if (!this.hasExtractedNationalSignificantNumber) {\n        return this.extractNationalSignificantNumber(nationalDigits, setState);\n      }\n\n      if (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\n        return;\n      }\n\n      var _extractNationalNumbe2 = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe2.nationalPrefix,\n          nationalNumber = _extractNationalNumbe2.nationalNumber,\n          carrierCode = _extractNationalNumbe2.carrierCode; // If a national prefix has been extracted previously,\n      // then it's always extracted as additional digits are added.\n      // That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\n      // doesn't do anything different from what it currently does.\n      // So, just in case, here's this check, though it doesn't occur.\n\n      /* istanbul ignore if */\n\n\n      if (nationalNumber === prevNationalSignificantNumber) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n  }, {\n    key: \"onExtractedNationalNumber\",\n    value: function onExtractedNationalNumber(nationalPrefix, carrierCode, nationalSignificantNumber, nationalDigits, setState) {\n      var complexPrefixBeforeNationalSignificantNumber;\n      var nationalSignificantNumberMatchesInput; // This check also works with empty `this.nationalSignificantNumber`.\n\n      var nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber); // If the extracted national (significant) number is the\n      // last substring of the `digits`, then it means that it hasn't been altered:\n      // no digits have been removed from the national (significant) number\n      // while applying `national_prefix_transform_rule`.\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n\n      if (nationalSignificantNumberIndex >= 0 && nationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\n        nationalSignificantNumberMatchesInput = true; // If a prefix of a national (significant) number is not as simple\n        // as just a basic national prefix, then such prefix is stored in\n        // `this.complexPrefixBeforeNationalSignificantNumber` property and will be\n        // prepended \"as is\" to the national (significant) number to produce\n        // a formatted result.\n\n        var prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex); // `prefixBeforeNationalNumber` is always non-empty,\n        // because `onExtractedNationalNumber()` isn't called\n        // when a national (significant) number hasn't been actually \"extracted\":\n        // when a national (significant) number is equal to the national part of `digits`,\n        // then `onExtractedNationalNumber()` doesn't get called.\n\n        if (prefixBeforeNationalNumber !== nationalPrefix) {\n          complexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber;\n        }\n      }\n\n      setState({\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode,\n        nationalSignificantNumber: nationalSignificantNumber,\n        nationalSignificantNumberMatchesInput: nationalSignificantNumberMatchesInput,\n        complexPrefixBeforeNationalSignificantNumber: complexPrefixBeforeNationalSignificantNumber\n      }); // `onExtractedNationalNumber()` is only called when\n      // the national (significant) number actually did change.\n\n      this.hasExtractedNationalSignificantNumber = true;\n      this.onNationalSignificantNumberChange();\n    }\n  }, {\n    key: \"reExtractNationalSignificantNumber\",\n    value: function reExtractNationalSignificantNumber(state) {\n      // Attempt to extract a national prefix.\n      //\n      // Some people incorrectly input national prefix\n      // in an international phone number.\n      // For example, some people write British phone numbers as `+44(0)...`.\n      //\n      // Also, in some rare cases, it is valid for a national prefix\n      // to be a part of an international phone number.\n      // For example, mobile phone numbers in Mexico are supposed to be\n      // dialled internationally using a `1` national prefix,\n      // so the national prefix will be part of an international number.\n      //\n      // Quote from:\n      // https://www.mexperience.com/dialing-cell-phones-in-mexico/\n      //\n      // \"Dialing a Mexican cell phone from abroad\n      // When you are calling a cell phone number in Mexico from outside Mexico,\n      // it’s necessary to dial an additional “1” after Mexico’s country code\n      // (which is “52”) and before the area code.\n      // You also ignore the 045, and simply dial the area code and the\n      // cell phone’s number.\n      //\n      // If you don’t add the “1”, you’ll receive a recorded announcement\n      // asking you to redial using it.\n      //\n      // For example, if you are calling from the USA to a cell phone\n      // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n      // (Note that this is different to calling a land line in Mexico City\n      // from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n      //\n      // Google's demo output:\n      // https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\n      //\n      if (this.extractAnotherNationalSignificantNumber(state.getNationalDigits(), state.nationalSignificantNumber, state.update)) {\n        return true;\n      } // If no format matches the phone number, then it could be\n      // \"a really long IDD\" (quote from a comment in Google's library).\n      // An IDD prefix is first extracted when the user has entered at least 3 digits,\n      // and then here — every time when there's a new digit and the number\n      // couldn't be formatted.\n      // For example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      //\n      // Could also check `!hasReceivedThreeLeadingDigits` here\n      // to filter out the case when this check duplicates the one\n      // already performed when there're 3 leading digits,\n      // but it's not a big deal, and in most cases there\n      // will be a suitable `format` when there're 3 leading digits.\n      //\n\n\n      if (this.extractIddPrefix(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      } // Google's AsYouType formatter supports sort of an \"autocorrection\" feature\n      // when it \"autocorrects\" numbers that have been input for a country\n      // with that country's calling code.\n      // Such \"autocorrection\" feature looks weird, but different people have been requesting it:\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      // https://github.com/catamphetamine/libphonenumber-js/issues/375\n      // https://github.com/catamphetamine/libphonenumber-js/issues/316\n\n\n      if (this.fixMissingPlus(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"extractIddPrefix\",\n    value: function extractIddPrefix(state) {\n      // An IDD prefix can't be present in a number written with a `+`.\n      // Also, don't re-extract an IDD prefix if has already been extracted.\n      var international = state.international,\n          IDDPrefix = state.IDDPrefix,\n          digits = state.digits,\n          nationalSignificantNumber = state.nationalSignificantNumber;\n\n      if (international || IDDPrefix) {\n        return;\n      } // Some users input their phone number in \"out-of-country\"\n      // dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers.\n\n\n      var numberWithoutIDD = stripIddPrefix(digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);\n\n      if (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\n        // If an IDD prefix was stripped then convert the IDD-prefixed number\n        // to international number for subsequent parsing.\n        state.update({\n          IDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\n        });\n        this.startInternationalNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"fixMissingPlus\",\n    value: function fixMissingPlus(state) {\n      if (!state.international) {\n        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(state.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n            newCallingCode = _extractCountryCallin2.countryCallingCode,\n            number = _extractCountryCallin2.number;\n\n        if (newCallingCode) {\n          state.update({\n            missingPlus: true\n          });\n          this.startInternationalNumber(state);\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber(state) {\n      state.startInternationalNumber(); // If a national (significant) number has been extracted before, reset it.\n\n      if (state.nationalSignificantNumber) {\n        state.resetNationalSignificantNumber();\n        this.onNationalSignificantNumberChange();\n        this.hasExtractedNationalSignificantNumber = undefined;\n      }\n    }\n  }, {\n    key: \"extractCallingCodeAndNationalSignificantNumber\",\n    value: function extractCallingCodeAndNationalSignificantNumber(state) {\n      if (this.extractCountryCallingCode(state)) {\n        // `this.extractCallingCode()` is currently called when the number\n        // couldn't be formatted during the standard procedure.\n        // Normally, the national prefix would be re-extracted\n        // for an international number if such number couldn't be formatted,\n        // but since it's already not able to be formatted,\n        // there won't be yet another retry, so also extract national prefix here.\n        this.extractNationalSignificantNumber(state.getNationalDigits(), state.update);\n      }\n    }\n  }]);\n\n  return AsYouTypeParser;\n}();\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\n\n\nexport { AsYouTypeParser as default };\n\nfunction extractFormattedPhoneNumber(text) {\n  // Attempt to extract a possible number from the string passed in.\n  var startsAt = text.search(VALID_PHONE_NUMBER);\n\n  if (startsAt < 0) {\n    return;\n  } // Trim everything to the left of the phone number.\n\n\n  text = text.slice(startsAt); // Trim the `+`.\n\n  var hasPlus;\n\n  if (text[0] === '+') {\n    hasPlus = true;\n    text = text.slice('+'.length);\n  } // Trim everything to the right of the phone number.\n\n\n  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.\n\n  if (hasPlus) {\n    text = '+' + text;\n  }\n\n  return text;\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nfunction _extractFormattedDigitsAndPlus(text) {\n  // Extract a formatted phone number part from text.\n  var extractedNumber = extractFormattedPhoneNumber(text) || ''; // Trim a `+`.\n\n  if (extractedNumber[0] === '+') {\n    return [extractedNumber.slice('+'.length), true];\n  }\n\n  return [extractedNumber];\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nexport function extractFormattedDigitsAndPlus(text) {\n  var _extractFormattedDigi3 = _extractFormattedDigitsAndPlus(text),\n      _extractFormattedDigi4 = _slicedToArray(_extractFormattedDigi3, 2),\n      formattedDigits = _extractFormattedDigi4[0],\n      hasPlus = _extractFormattedDigi4[1]; // If the extracted phone number part\n  // can possibly be a part of some valid phone number\n  // then parse phone number characters from a formatted phone number.\n\n\n  if (!VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN.test(formattedDigits)) {\n    formattedDigits = '';\n  }\n\n  return [formattedDigits, hasPlus];\n}\n//# sourceMappingURL=AsYouTypeParser.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport Metadata from './metadata';\nimport PhoneNumber from './PhoneNumber';\nimport AsYouTypeState from './AsYouTypeState';\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter';\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar AsYouType =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(optionsOrDefaultCountry, metadata) {\n    _classCallCheck(this, AsYouType);\n\n    this.metadata = new Metadata(metadata);\n\n    var _this$getCountryAndCa = this.getCountryAndCallingCode(optionsOrDefaultCountry),\n        _this$getCountryAndCa2 = _slicedToArray(_this$getCountryAndCa, 2),\n        defaultCountry = _this$getCountryAndCa2[0],\n        defaultCallingCode = _this$getCountryAndCa2[1];\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.reset();\n  }\n\n  _createClass(AsYouType, [{\n    key: \"getCountryAndCallingCode\",\n    value: function getCountryAndCallingCode(optionsOrDefaultCountry) {\n      // Set `defaultCountry` and `defaultCallingCode` options.\n      var defaultCountry;\n      var defaultCallingCode; // Turns out `null` also has type \"object\". Weird.\n\n      if (optionsOrDefaultCountry) {\n        if (_typeof(optionsOrDefaultCountry) === 'object') {\n          defaultCountry = optionsOrDefaultCountry.defaultCountry;\n          defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;\n        } else {\n          defaultCountry = optionsOrDefaultCountry;\n        }\n      }\n\n      if (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\n        defaultCountry = undefined;\n      }\n\n      if (defaultCallingCode) {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            defaultCountry = '001';\n          }\n        }\n      }\n\n      return [defaultCountry, defaultCallingCode];\n    }\n    /**\r\n     * Inputs \"next\" phone number characters.\r\n     * @param  {string} text\r\n     * @return {string} Formatted phone number characters that have been input so far.\r\n     */\n\n  }, {\n    key: \"input\",\n    value: function input(text) {\n      var _this$parser$input = this.parser.input(text, this.state),\n          digits = _this$parser$input.digits,\n          justLeadingPlus = _this$parser$input.justLeadingPlus;\n\n      if (justLeadingPlus) {\n        this.formattedOutput = '+';\n      } else if (digits) {\n        this.determineTheCountryIfNeeded(); // Match the available formats by the currently available leading digits.\n\n        if (this.state.nationalSignificantNumber) {\n          this.formatter.narrowDownMatchingFormats(this.state);\n        }\n\n        var formattedNationalNumber;\n\n        if (this.metadata.hasSelectedNumberingPlan()) {\n          formattedNationalNumber = this.formatter.format(digits, this.state);\n        }\n\n        if (formattedNationalNumber === undefined) {\n          // See if another national (significant) number could be re-extracted.\n          if (this.parser.reExtractNationalSignificantNumber(this.state)) {\n            this.determineTheCountryIfNeeded(); // If it could, then re-try formatting the new national (significant) number.\n\n            var nationalDigits = this.state.getNationalDigits();\n\n            if (nationalDigits) {\n              formattedNationalNumber = this.formatter.format(nationalDigits, this.state);\n            }\n          }\n        }\n\n        this.formattedOutput = formattedNationalNumber ? this.getFullNumber(formattedNationalNumber) : this.getNonFormattedNumber();\n      }\n\n      return this.formattedOutput;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n\n      this.state = new AsYouTypeState({\n        onCountryChange: function onCountryChange(country) {\n          // Before version `1.6.0`, the official `AsYouType` formatter API\n          // included the `.country` property of an `AsYouType` instance.\n          // Since that property (along with the others) have been moved to\n          // `this.state`, `this.country` property is emulated for compatibility\n          // with the old versions.\n          _this.country = country;\n        },\n        onCallingCodeChange: function onCallingCodeChange(country, callingCode) {\n          _this.metadata.selectNumberingPlan(country, callingCode);\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n\n          _this.parser.reset(_this.metadata.numberingPlan);\n        }\n      });\n      this.formatter = new AsYouTypeFormatter({\n        state: this.state,\n        metadata: this.metadata\n      });\n      this.parser = new AsYouTypeParser({\n        defaultCountry: this.defaultCountry,\n        defaultCallingCode: this.defaultCallingCode,\n        metadata: this.metadata,\n        state: this.state,\n        onNationalSignificantNumberChange: function onNationalSignificantNumberChange() {\n          _this.determineTheCountryIfNeeded();\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n        }\n      });\n      this.state.reset(this.defaultCountry, this.defaultCallingCode);\n      this.formattedOutput = '';\n      return this;\n    }\n    /**\r\n     * Returns `true` if the phone number is being input in international format.\r\n     * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isInternational\",\n    value: function isInternational() {\n      return this.state.international;\n    }\n    /**\r\n     * Returns the \"country calling code\" part of the phone number.\r\n     * Returns `undefined` if the number is not being input in international format.\r\n     * Returns \"country calling code\" for \"non-geographic\" phone numbering plans too.\r\n     * @return {string} [callingCode]\r\n     */\n\n  }, {\n    key: \"getCallingCode\",\n    value: function getCallingCode() {\n      return this.state.callingCode;\n    } // A legacy alias.\n\n  }, {\n    key: \"getCountryCallingCode\",\n    value: function getCountryCallingCode() {\n      return this.getCallingCode();\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * Returns `undefined` if no phone number has been input yet.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"getCountry\",\n    value: function getCountry() {\n      var _this$state = this.state,\n          digits = _this$state.digits,\n          country = _this$state.country; // If no digits have been input yet,\n      // then `this.country` is the `defaultCountry`.\n      // Won't return the `defaultCountry` in such case.\n\n      if (!digits) {\n        return;\n      }\n\n      var countryCode = country;\n      /* istanbul ignore if */\n\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        // `AsYouType.getCountry()` returns `undefined`\n        // for \"non-geographic\" phone numbering plans.\n        if (countryCode === '001') {\n          countryCode = undefined;\n        }\n      }\n\n      return countryCode;\n    }\n  }, {\n    key: \"determineTheCountryIfNeeded\",\n    value: function determineTheCountryIfNeeded() {\n      // Suppose a user enters a phone number in international format,\n      // and there're several countries corresponding to that country calling code,\n      // and a country has been derived from the number, and then\n      // a user enters one more digit and the number is no longer\n      // valid for the derived country, so the country should be re-derived\n      // on every new digit in those cases.\n      //\n      // If the phone number is being input in national format,\n      // then it could be a case when `defaultCountry` wasn't specified\n      // when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\n      // and that \"calling code\" could correspond to a \"non-geographic entity\",\n      // or there could be several countries corresponding to that country calling code.\n      // In those cases, `this.country` is `undefined` and should be derived\n      // from the number. Again, if country calling code is ambiguous, then\n      // `this.country` should be re-derived with each new digit.\n      //\n      if (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\n        this.determineTheCountry();\n      }\n    } // Prepends `+CountryCode ` in case of an international phone number\n\n  }, {\n    key: \"getFullNumber\",\n    value: function getFullNumber(formattedNationalNumber) {\n      var _this2 = this;\n\n      if (this.isInternational()) {\n        var prefix = function prefix(text) {\n          return _this2.formatter.getInternationalPrefixBeforeCountryCallingCode(_this2.state, {\n            spacing: text ? true : false\n          }) + text;\n        };\n\n        var callingCode = this.state.callingCode;\n\n        if (!callingCode) {\n          return prefix(\"\".concat(this.state.getDigitsWithoutInternationalPrefix()));\n        }\n\n        if (!formattedNationalNumber) {\n          return prefix(callingCode);\n        }\n\n        return prefix(\"\".concat(callingCode, \" \").concat(formattedNationalNumber));\n      }\n\n      return formattedNationalNumber;\n    }\n  }, {\n    key: \"getNonFormattedNationalNumberWithPrefix\",\n    value: function getNonFormattedNationalNumberWithPrefix() {\n      var _this$state2 = this.state,\n          nationalSignificantNumber = _this$state2.nationalSignificantNumber,\n          complexPrefixBeforeNationalSignificantNumber = _this$state2.complexPrefixBeforeNationalSignificantNumber,\n          nationalPrefix = _this$state2.nationalPrefix;\n      var number = nationalSignificantNumber;\n      var prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix;\n\n      if (prefix) {\n        number = prefix + number;\n      }\n\n      return number;\n    }\n  }, {\n    key: \"getNonFormattedNumber\",\n    value: function getNonFormattedNumber() {\n      var nationalSignificantNumberMatchesInput = this.state.nationalSignificantNumberMatchesInput;\n      return this.getFullNumber(nationalSignificantNumberMatchesInput ? this.getNonFormattedNationalNumberWithPrefix() : this.state.getNationalDigits());\n    }\n  }, {\n    key: \"getNonFormattedTemplate\",\n    value: function getNonFormattedTemplate() {\n      var number = this.getNonFormattedNumber();\n\n      if (number) {\n        return number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n      }\n    }\n  }, {\n    key: \"isCountryCallingCodeAmbiguous\",\n    value: function isCountryCallingCodeAmbiguous() {\n      var callingCode = this.state.callingCode;\n      var countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode);\n      return countryCodes && countryCodes.length > 1;\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n\n  }, {\n    key: \"determineTheCountry\",\n    value: function determineTheCountry() {\n      this.state.setCountry(getCountryByCallingCode(this.isInternational() ? this.state.callingCode : this.defaultCallingCode, this.state.nationalSignificantNumber, this.metadata));\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n\n  }, {\n    key: \"getNumber\",\n    value: function getNumber() {\n      var _this$state3 = this.state,\n          nationalSignificantNumber = _this$state3.nationalSignificantNumber,\n          carrierCode = _this$state3.carrierCode;\n\n      if (this.isInternational()) {\n        if (!this.state.callingCode) {\n          return;\n        }\n      } else {\n        if (!this.state.country && !this.defaultCallingCode) {\n          return;\n        }\n      }\n\n      if (!nationalSignificantNumber) {\n        return;\n      }\n\n      var countryCode = this.getCountry();\n      var callingCode = this.getCountryCallingCode() || this.defaultCallingCode;\n      var phoneNumber = new PhoneNumber(countryCode || callingCode, nationalSignificantNumber, this.metadata.metadata);\n\n      if (carrierCode) {\n        phoneNumber.carrierCode = carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n\n      return phoneNumber;\n    }\n    /**\r\n     * Returns `true` if the phone number is \"possible\".\r\n     * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isPossible();\n    }\n    /**\r\n     * Returns `true` if the phone number is \"valid\".\r\n     * Is just a shortcut for `PhoneNumber.isValid()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isValid();\n    }\n    /**\r\n     * @deprecated\r\n     * This method is used in `react-phone-number-input/source/input-control.js`\r\n     * in versions before `3.0.16`.\r\n     */\n\n  }, {\n    key: \"getNationalNumber\",\n    value: function getNationalNumber() {\n      return this.state.nationalSignificantNumber;\n    }\n    /**\r\n     * Returns the phone number characters entered by the user.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getChars\",\n    value: function getChars() {\n      return (this.state.international ? '+' : '') + this.state.digits;\n    }\n    /**\r\n     * Returns the template for the formatted phone number.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate() {\n      return this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || '';\n    }\n  }]);\n\n  return AsYouType;\n}();\n\nexport { AsYouType as default };\n//# sourceMappingURL=AsYouType.js.map","import Metadata from './metadata';\nexport default function getCountries(metadata) {\n  return new Metadata(metadata).getCountries();\n}\n//# sourceMappingURL=getCountries.js.map","import { getCountryCallingCode } from 'libphonenumber-js/core';\nexport function getInputValuePrefix(_ref) {\n  var country = _ref.country,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      metadata = _ref.metadata;\n  return country && international && !withCountryCallingCode ? \"+\".concat(getCountryCallingCode(country, metadata)) : '';\n}\nexport function removeInputValuePrefix(value, prefix) {\n  if (prefix) {\n    value = value.slice(prefix.length);\n\n    if (value[0] === ' ') {\n      value = value.slice(1);\n    }\n  }\n\n  return value;\n}\n//# sourceMappingURL=inputValuePrefix.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from 'input-format/react';\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix';\n/**\r\n * This input uses `input-format` library\r\n * for \"smart\" caret positioning.\r\n */\n\nexport function createInput(defaultMetadata) {\n  function InputSmart(_ref, ref) {\n    var country = _ref.country,\n        international = _ref.international,\n        withCountryCallingCode = _ref.withCountryCallingCode,\n        metadata = _ref.metadata,\n        rest = _objectWithoutProperties(_ref, [\"country\", \"international\", \"withCountryCallingCode\", \"metadata\"]);\n\n    var format = useCallback(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new AsYouType(country, metadata);\n      var prefix = getInputValuePrefix({\n        country: country,\n        international: international,\n        withCountryCallingCode: withCountryCallingCode,\n        metadata: metadata\n      }); // Format the number.\n\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n\n      if (prefix) {\n        text = removeInputValuePrefix(text, prefix); // `AsYouType.getTemplate()` can be `undefined`.\n\n        if (template) {\n          template = removeInputValuePrefix(template, prefix);\n        }\n      }\n\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      parse: parsePhoneNumberCharacter,\n      format: format\n    }));\n  }\n\n  InputSmart = React.forwardRef(InputSmart);\n  InputSmart.propTypes = {\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  InputSmart.defaultProps = {\n    metadata: defaultMetadata\n  };\n  return InputSmart;\n}\nexport default createInput();\n//# sourceMappingURL=InputSmart.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n   * but still works good enough. When erasing or inserting digits in the middle\r\n   * of a phone number the caret usually jumps to the end: this is the expected\r\n   * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n        onChange = _ref.onChange,\n        country = _ref.country,\n        international = _ref.international,\n        withCountryCallingCode = _ref.withCountryCallingCode,\n        metadata = _ref.metadata,\n        Input = _ref.inputComponent,\n        rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"country\", \"international\", \"withCountryCallingCode\", \"metadata\", \"inputComponent\"]);\n\n    var prefix = getInputValuePrefix({\n      country: country,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      metadata: metadata\n    });\n\n    var _onChange = useCallback(function (event) {\n      var newValue = parseIncompletePhoneNumber(event.target.value); // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      // Working around this issue with this simple hack.\n\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange\n    }));\n  }\n\n  InputBasic = React.forwardRef(InputBasic);\n  InputBasic.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: PropTypes.string.isRequired,\n\n    /**\r\n     * Updates the `value`.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return InputBasic;\n}\nexport default createInput();\n\nfunction format(prefix, value, country, metadata) {\n  return removeInputValuePrefix(formatIncompletePhoneNumber(prefix + value, country, metadata), prefix);\n}\n//# sourceMappingURL=InputBasic.js.map","import AsYouType from './AsYouType';\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\n\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n\n  return new AsYouType(country, metadata).input(value);\n}\n//# sourceMappingURL=formatIncompletePhoneNumber.js.map","import { getCountryCallingCode, Metadata } from 'libphonenumber-js/core';\nvar ONLY_DIGITS_REGEXP = /^\\d+$/;\nexport default function getInternationalPhoneNumberPrefix(country, metadata) {\n  // Standard international phone number prefix: \"+\" and \"country calling code\".\n  var prefix = '+' + getCountryCallingCode(country, metadata); // Get \"leading digits\" for a phone number of the country.\n  // If there're \"leading digits\" then they can be part of the prefix too.\n\n  metadata = new Metadata(metadata);\n  metadata.country(country);\n\n  if (metadata.numberingPlan.leadingDigits() && ONLY_DIGITS_REGEXP.test(metadata.numberingPlan.leadingDigits())) {\n    prefix += metadata.numberingPlan.leadingDigits();\n  }\n\n  return prefix;\n}\n//# sourceMappingURL=getInternationalPhoneNumberPrefix.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { parsePhoneNumberFromString } from 'libphonenumber-js/core';\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function formatPhoneNumber(value, format, metadata) {\n  if (!metadata) {\n    if (_typeof(format) === 'object') {\n      metadata = format;\n      format = 'NATIONAL';\n    }\n  }\n\n  if (!value) {\n    return '';\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return '';\n  } // Deprecated.\n  // Legacy `format`s.\n\n\n  switch (format) {\n    case 'National':\n      format = 'NATIONAL';\n      break;\n\n    case 'International':\n      format = 'INTERNATIONAL';\n      break;\n  }\n\n  return phoneNumber.format(format);\n}\nexport function formatPhoneNumberIntl(value, metadata) {\n  return formatPhoneNumber(value, 'INTERNATIONAL', metadata);\n}\n//# sourceMappingURL=formatPhoneNumber.js.map","import { parsePhoneNumberFromString } from 'libphonenumber-js/core';\nexport default function isValidPhoneNumber(value, metadata) {\n  if (!value) {\n    return false;\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return false;\n  }\n\n  return phoneNumber.isValid();\n}\n//# sourceMappingURL=isValidPhoneNumber.js.map","import { parsePhoneNumberFromString } from 'libphonenumber-js/core';\nexport default function isPossiblePhoneNumber(value, metadata) {\n  if (!value) {\n    return false;\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return false;\n  }\n\n  return phoneNumber.isPossible();\n}\n//# sourceMappingURL=isPossiblePhoneNumber.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { useRef, useState, useCallback, useEffect } from 'react';\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core';\nimport getInternationalPhoneNumberPrefix from './helpers/getInternationalPhoneNumberPrefix';\n/**\r\n * Returns `[phoneDigits, setPhoneDigits]`.\r\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n */\n\nexport default function usePhoneDigits(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      country = _ref.country,\n      defaultCountry = _ref.defaultCountry,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      useNationalFormatForDefaultCountryValue = _ref.useNationalFormatForDefaultCountryValue,\n      metadata = _ref.metadata;\n  var countryMismatchDetected = useRef();\n\n  var onCountryMismatch = function onCountryMismatch(value, country, actualCountry) {\n    console.error(\"[react-phone-number-input] Expected phone number \".concat(value, \" to correspond to country \").concat(country, \" but \").concat(actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t', \".\"));\n    countryMismatchDetected.current = true;\n  };\n\n  var getInitialPhoneDigits = function getInitialPhoneDigits() {\n    return getPhoneDigitsForValue(value, country, international, withCountryCallingCode, defaultCountry, useNationalFormatForDefaultCountryValue, metadata, onCountryMismatch);\n  }; // This is only used to detect `country` property change.\n\n\n  var _useState = useState(country),\n      _useState2 = _slicedToArray(_useState, 2),\n      prevCountry = _useState2[0],\n      setPrevCountry = _useState2[1]; // This is only used to detect `defaultCountry` property change.\n\n\n  var _useState3 = useState(defaultCountry),\n      _useState4 = _slicedToArray(_useState3, 2),\n      prevDefaultCountry = _useState4[0],\n      setPrevDefaultCountry = _useState4[1]; // `phoneDigits` is the `value` passed to the `<input/>`.\n\n\n  var _useState5 = useState(getInitialPhoneDigits()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      phoneDigits = _useState6[0],\n      setPhoneDigits = _useState6[1]; // This is only used to detect `value` property changes.\n\n\n  var _useState7 = useState(value),\n      _useState8 = _slicedToArray(_useState7, 2),\n      valueForPhoneDigits = _useState8[0],\n      setValueForPhoneDigits = _useState8[1]; // Rerender hack.\n\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      rerenderTrigger = _useState10[0],\n      setRerenderTrigger = _useState10[1];\n\n  var rerender = useCallback(function () {\n    return setRerenderTrigger({});\n  }, [setRerenderTrigger]); // If `value` property has been changed externally\n  // then re-initialize the component.\n\n  useEffect(function () {\n    if (value !== valueForPhoneDigits) {\n      setValueForPhoneDigits(value);\n      setPhoneDigits(getInitialPhoneDigits());\n    }\n  }, [value]); // If the `country` has been changed then re-initialize the component.\n\n  useEffect(function () {\n    if (country !== prevCountry) {\n      setPrevCountry(country);\n      setPhoneDigits(getInitialPhoneDigits());\n    }\n  }, [country]); // If the `defaultCountry` has been changed then re-initialize the component.\n\n  useEffect(function () {\n    if (defaultCountry !== prevDefaultCountry) {\n      setPrevDefaultCountry(defaultCountry);\n      setPhoneDigits(getInitialPhoneDigits());\n    }\n  }, [defaultCountry]); // Update the `value` after `valueForPhoneDigits` has been updated.\n\n  useEffect(function () {\n    if (valueForPhoneDigits !== value) {\n      onChange(valueForPhoneDigits);\n    }\n  }, [valueForPhoneDigits]);\n  var onSetPhoneDigits = useCallback(function (phoneDigits) {\n    var value;\n\n    if (country) {\n      if (international && withCountryCallingCode) {\n        // The `<input/>` value must start with the country calling code.\n        var prefix = getInternationalPhoneNumberPrefix(country, metadata);\n\n        if (phoneDigits.indexOf(prefix) !== 0) {\n          // // Reset phone digits if they don't start with the correct prefix.\n          // // Undo the `<input/>` value change if it doesn't.\n          if (countryMismatchDetected.current) {// In case of a `country`/`value` mismatch,\n            // if it performed an \"undo\" here, then\n            // it wouldn't let a user edit their phone number at all,\n            // so this special case at least allows phone number editing\n            // when `value` already doesn't match the `country`.\n          } else {\n            // If it simply did `phoneDigits = prefix` here,\n            // then it could have no effect when erasing phone number\n            // via Backspace, because `phoneDigits` in `state` wouldn't change\n            // as a result, because it was `prefix` and it became `prefix`,\n            // so the component wouldn't rerender, and the user would be able\n            // to erase the country calling code part, and that part is\n            // assumed to be non-eraseable. That's why the component is\n            // forcefully rerendered here.\n            setPhoneDigits(prefix);\n            setValueForPhoneDigits(undefined); // Force a re-render of the `<input/>` with previous `phoneDigits` value.\n\n            return rerender();\n          }\n        }\n      } else {\n        // Entering phone number either in \"national\" format\n        // when `country` has been specified, or in \"international\" format\n        // when `country` has been specified but `withCountryCallingCode` hasn't.\n        // Therefore, `+` is not allowed.\n        if (phoneDigits && phoneDigits[0] === '+') {\n          // Remove the `+`.\n          phoneDigits = phoneDigits.slice(1);\n        }\n      }\n    } else if (!defaultCountry) {\n      // Force a `+` in the beginning of a `value`\n      // when no `country` and `defaultCountry` have been specified.\n      if (phoneDigits && phoneDigits[0] !== '+') {\n        // Prepend a `+`.\n        phoneDigits = '+' + phoneDigits;\n      }\n    } // Convert `phoneDigits` to `value`.\n\n\n    if (phoneDigits) {\n      var asYouType = new AsYouType(country || defaultCountry, metadata);\n      asYouType.input(country && international && !withCountryCallingCode ? \"+\".concat(getCountryCallingCode(country, metadata)).concat(phoneDigits) : phoneDigits);\n      var phoneNumber = asYouType.getNumber(); // If it's a \"possible\" incomplete phone number.\n\n      if (phoneNumber) {\n        value = phoneNumber.number;\n      }\n    }\n\n    setPhoneDigits(phoneDigits);\n    setValueForPhoneDigits(value);\n  }, [country, international, withCountryCallingCode, defaultCountry, metadata, setPhoneDigits, setValueForPhoneDigits, rerender, countryMismatchDetected]);\n  return [phoneDigits, onSetPhoneDigits];\n}\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {boolean} [withCountryCallingCode]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nfunction getPhoneDigitsForValue(value, country, international, withCountryCallingCode, defaultCountry, useNationalFormatForDefaultCountryValue, metadata, onCountryMismatch) {\n  if (country && international && withCountryCallingCode) {\n    var prefix = getInternationalPhoneNumberPrefix(country, metadata);\n\n    if (value) {\n      if (value.indexOf(prefix) !== 0) {\n        onCountryMismatch(value, country);\n      }\n\n      return value;\n    }\n\n    return prefix;\n  }\n\n  if (!value) {\n    return '';\n  }\n\n  if (!country && !defaultCountry) {\n    return value;\n  }\n\n  var asYouType = new AsYouType(undefined, metadata);\n  asYouType.input(value);\n  var phoneNumber = asYouType.getNumber();\n\n  if (phoneNumber) {\n    if (country) {\n      if (phoneNumber.country && phoneNumber.country !== country) {\n        onCountryMismatch(value, country, phoneNumber.country);\n      } else if (phoneNumber.countryCallingCode !== getCountryCallingCode(country, metadata)) {\n        onCountryMismatch(value, country);\n      }\n\n      if (international) {\n        return phoneNumber.nationalNumber;\n      }\n\n      return parseDigits(phoneNumber.formatNational());\n    } else {\n      if (phoneNumber.country && phoneNumber.country === defaultCountry && useNationalFormatForDefaultCountryValue) {\n        return parseDigits(phoneNumber.formatNational());\n      }\n\n      return value;\n    }\n  } else {\n    return '';\n  }\n}\n//# sourceMappingURL=usePhoneDigits.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport InputSmart from './InputSmart';\nimport InputBasic from './InputBasic';\nimport usePhoneDigits from './usePhoneDigits';\nexport function createInput(defaultMetadata) {\n  function PhoneInput(_ref, ref) {\n    var country = _ref.country,\n        defaultCountry = _ref.defaultCountry,\n        useNationalFormatForDefaultCountryValue = _ref.useNationalFormatForDefaultCountryValue,\n        value = _ref.value,\n        onChange = _ref.onChange,\n        metadata = _ref.metadata,\n        smartCaret = _ref.smartCaret,\n        international = _ref.international,\n        withCountryCallingCode = _ref.withCountryCallingCode,\n        rest = _objectWithoutProperties(_ref, [\"country\", \"defaultCountry\", \"useNationalFormatForDefaultCountryValue\", \"value\", \"onChange\", \"metadata\", \"smartCaret\", \"international\", \"withCountryCallingCode\"]);\n\n    // \"Phone digits\" includes not only \"digits\" but also a `+` sign.\n    var _usePhoneDigits = usePhoneDigits({\n      value: value,\n      onChange: onChange,\n      country: country,\n      defaultCountry: defaultCountry,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      useNationalFormatForDefaultCountryValue: useNationalFormatForDefaultCountryValue,\n      metadata: metadata\n    }),\n        _usePhoneDigits2 = _slicedToArray(_usePhoneDigits, 2),\n        phoneDigits = _usePhoneDigits2[0],\n        setPhoneDigits = _usePhoneDigits2[1];\n\n    var InputComponent = smartCaret ? InputSmart : InputBasic;\n    return React.createElement(InputComponent, _extends({}, rest, {\n      ref: ref,\n      metadata: metadata,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      country: country || defaultCountry,\n      value: phoneDigits,\n      onChange: setPhoneDigits\n    }));\n  }\n\n  PhoneInput = React.forwardRef(PhoneInput);\n  PhoneInput.propTypes = {\n    /**\r\n     * HTML `<input/>` `type` attribute.\r\n     */\n    type: PropTypes.string,\n\n    /**\r\n     * HTML `<input/>` `autocomplete` attribute.\r\n     */\n    autoComplete: PropTypes.string,\n\n    /**\r\n     * The phone number (in E.164 format).\r\n     * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n     */\n    value: PropTypes.string,\n\n    /**\r\n     * Updates the `value`.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (example: `(213) 373-4253`),\r\n     * or as an international phone number without \"country calling code\"\r\n     * if `international` property is passed (example: `213 373 4253`).\r\n     * Example: \"US\".\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (example: `+1 213 373 4253`)\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n     * The user can still input a phone number in international format.\r\n     * Example: \"US\".\r\n     * `country` and `defaultCountry` properties are mutually exclusive.\r\n     */\n    defaultCountry: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: PropTypes.bool,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType,\n\n    /**\r\n     * By default, the caret position is being \"intelligently\" managed\r\n     * while a user inputs a phone number.\r\n     * This \"smart\" caret behavior can be turned off\r\n     * by passing `smartCaret={false}` property.\r\n     * This is just an \"escape hatch\" for any possible caret position issues.\r\n     */\n    // Is `true` by default.\n    smartCaret: PropTypes.bool.isRequired,\n\n    /**\r\n     * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n     * then the `value` will be formatted as a national phone number by default.\r\n     * To format the initial `value` of `defaultCountry` as an international number instead\r\n     * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n     */\n    useNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  PhoneInput.defaultProps = {\n    /**\r\n     * HTML `<input/>` `type=\"tel\"`.\r\n     */\n    type: 'tel',\n\n    /**\r\n     * Remember (and autofill) the value as a phone number.\r\n     */\n    autoComplete: 'tel',\n\n    /**\r\n     * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n     */\n    smartCaret: true,\n\n    /**\r\n     * Set to `true` to force international phone number format\r\n     * (without \"country calling code\") when `country` is specified.\r\n     */\n    // international: false,\n\n    /**\r\n     * Prefer national format when formatting E.164 phone number `value`\r\n     * corresponding to `defaultCountry`.\r\n     */\n    useNationalFormatForDefaultCountryValue: true,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: defaultMetadata\n  };\n  return PhoneInput;\n}\nexport default createInput();\n//# sourceMappingURL=PhoneInput.js.map","import metadata from 'libphonenumber-js/metadata.mobile.json'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode\r\n} from '../core/index'\r\n\r\nimport { createInput } from '../modules/PhoneInput'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}"],"names":["count_occurences","symbol","string","count","_iterator","split","_isArray","Array","isArray","_i","Symbol","iterator","_ref","length","next","done","value","close_braces","retained_template","template","placeholder","arguments","undefined","empty_placeholder","cut_before","opening_braces","closing_braces","dangling_braces","replace","format","caret","formatter","should_close_braces","text","characters_in_template","value_character_index","filled_in_template","character","template_formatter","index","found","possibly_last_input_character_index","getSelection","element","selectionStart","selectionEnd","start","end","Keys","setCaretPosition","caret_position","navigator","ANDROID_USER_AGENT_REG_EXP","test","userAgent","isAndroid","setSelectionRange","setTimeout","onKeyDown","event","input","_parse","_format","on_change","operation","keyCode","getOperation","preventDefault","selection","erase_selection","format_input_text","slice","_parse2","parse_character","focused_input_character_index","parse","operation_applied","edit","formatted","_extends","Object","assign","target","i","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Input","ref","InputComponent","inputComponent","onChange","onCut","onPaste","rest","ownRef","useRef","_onChange","useCallback","current","_onPaste","_onCut","_onKeyDown","onInputKeyDown","React","createElement","isEmptyValue","forwardRef","propTypes","PropTypes","func","isRequired","elementType","type","defaultProps","ParseError","code","instance","Constructor","TypeError","_classCallCheck","name","constructor","message","stack","Error","create","VALID_DIGITS","VALID_PUNCTUATION","concat","a","b","pa","pb","na","Number","nb","isNaN","_typeof","obj","_defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","_createClass","protoProps","staticProps","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","metadata","is_object","countries","join","type_of","validateMetadata","setVersion","filter","_","countryCode","v1","v2","v3","nonGeographic","nonGeographical","country","getCountryMetadata","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","hasCountry","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","_type","ext","country_phone_code_to_countries","country_calling_codes","globalMetadataObject","_this","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type2","getType","Type","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","getCountryCallingCode","countryCallingCode","version","v4","compare","getExtensionDigitsPattern","maxLength","createExtensionPattern","purpose","optionalExtnSuffix","possibleSeparatorsBetweenNumberAndExtLabel","possibleSeparatorsNumberExtLabelNoComma","VALID_PHONE_NUMBER_WITH_EXTENSION","VALID_PHONE_NUMBER_PATTERN","RegExp","isViablePhoneNumber","number","EXTN_PATTERN","DIGITS","0","1","2","3","4","5","6","7","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","parseDigit","parseDigits","result","digit","parseIncompletePhoneNumber","parsePhoneNumberCharacter","prevParsedCharacters","checkNumberLength","nationalNumber","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","push","sort","mergeArrays","actual_length","minimum_length","isPossibleNumber","_slicedToArray","arr","_arrayWithHoles","_arr","_n","_d","_e","_s","err","_iterableToArrayLimit","_nonIterableRest","matchesEntirely","regular_expression","NON_FIXED_LINE_PHONE_TYPES","getNumberType","options","phone","isNumberTypeEqualTo","pattern","_NON_FIXED_LINE_PHONE","applyInternationalSeparatorStyle","formattedNumber","trim","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","useInternationalFormat","withNationalPrefix","carrierCode","internationalFormat","SINGLE_IDD_PREFIX_REG_EXP","_defineProperty","DEFAULT_OPTIONS","formatExtension","extension","formatNumber","ownKeys","sym","getOwnPropertyDescriptor","forEach","_objectSpread","addExtension","formatNationalNumber","_ref2","formatRFC3966","fromCountry","iddPrefix","countryMetadata","getIddPrefix","formatIDD","formatAs","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","search","chooseFormatForNumber","PhoneNumber","_metadata","isCountryCode","isNonGeographicCallingCode","isValidNumber","phoneNumber","CAPTURING_DIGIT_PATTERN","stripIddPrefix","IDDPrefixPattern","matchedGroups","match","extractNationalNumberFromPossiblyIncompleteNumber","prefixPattern","prefixMatch","exec","capturedGroupsCount","hasCapturedGroups","prefixBeforeNationalNumber","possiblePositionOfTheFirstCapturedGroup","extractNationalNumber","_extractNationalNumbe","nationalSignificantNumber","shouldExtractNationalPrefix","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","possibleShorterNumber","possibleShorterNationalNumber","extractCountryCallingCode","numberWithoutIDD","_extractCountryCallin","shorterNumber","_countryCallingCode","getCountryByCallingCode","nationalPhoneNumber","possibleCountries","selectCountryFromList","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","defaultCountry","_parseInput","_part$split2","parseRFC3966","throwOnError","startsAt","extractFormattedPhoneNumber","withExtensionStripped","numberWithoutExtension","matches","extractExtension","parseInput","formattedPhoneNumber","_parsePhoneNumber","defaultCallingCode","exactCountry","parsePhoneNumber","hasSelectedNumberingPlan","valid","extended","possible","parseNumber","normalizeArguments","args","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","parsePhoneNumberFromString","isSupportedCountry","error","_normalizeArguments","parsePhoneNumberFromString_","AsYouTypeState","onCountryChange","onCallingCodeChange","properties","_Object$keys","international","missingPlus","digits","resetNationalSignificantNumber","initCountryAndCallingCode","getNationalDigits","nationalSignificantNumberMatchesInput","complexPrefixBeforeNationalSignificantNumber","setCountry","setCallingCode","nextDigits","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","repeat","times","cutAndStripNonPairedParens","cutBeforeIndex","pop","cleared_string","_i2","_dangling_braces","stripNonPairedParens","formatCompleteNumber","state","shouldTryNationalPrefixFormattingRule","getSeparatorAfterNationalPrefix","useNationalPrefixFormattingRule","formatNationalNumberWithAndWithoutNationalPrefixFormattingRule","_ref3","formattedNationalNumber","isValidFormattedNationalNumber","LONGEST_DUMMY_PHONE_NUMBER","NATIONAL_PREFIX_SEPARATORS_PATTERN","NON_ALTERING_FORMAT_REG_EXP","AsYouTypeFormatter","isNANP","resetFormat","chosenFormat","nationalNumberTemplate","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","matchingFormats","narrowDownMatchingFormats","_this2","canFormatCompleteNumber","formattedCompleteNumber","setNationalNumberTemplate","lastIndexOf","formatNationalNumberWithNextDigits","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","_ref4","_this3","leadingDigitsPatternIndex","formatSuits","formatMatches","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","Math","min","leadingDigitsPattern","_this4","_loop2","_isArray2","_iterator2","_ref5","getFormatFormat","createTemplateForFormat","_loop","getTemplateForFormat","_ref6","spacing","internationalPrefix","getInternationalPrefixBeforeCountryCallingCode","getDigitsWithoutInternationalPrefix","_ref7","strictPattern","nationalNumberDummyDigits","nationalPrefixIncludedInTemplate","numberFormat","numberFormatWithNationalPrefix","position","_i3","populateTemplateWithDigits","VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN","VALID_PHONE_NUMBER","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","COMPLEX_NATIONAL_PREFIX","AsYouTypeParser","onNationalSignificantNumberChange","justLeadingPlus","_extractFormattedDigi","_extractFormattedDigi4","extractedNumber","hasPlus","_extractFormattedDigitsAndPlus","formattedDigits","extractFormattedDigitsAndPlus","_extractFormattedDigi2","startInternationalNumber","inputDigits","hasReceivedThreeLeadingDigits","appendDigits","extractIddPrefix","isWaitingForCountryCallingCode","appendNationalSignificantNumberDigits","hasExtractedNationalSignificantNumber","extractNationalSignificantNumber","update","_extractCountryCallingCode","couldPossiblyExtractAnotherNationalSignificantNumber","nationalDigits","setState","onExtractedNationalNumber","prevNationalSignificantNumber","_extractNationalNumbe2","nationalSignificantNumberIndex","extractAnotherNationalSignificantNumber","fixMissingPlus","extractCallingCodeAndNationalSignificantNumber","_extractCountryCallin2","newCallingCode","AsYouType","optionsOrDefaultCountry","_this$getCountryAndCa2","getCountryAndCallingCode","reset","_this$parser$input","parser","formattedOutput","determineTheCountryIfNeeded","reExtractNationalSignificantNumber","getFullNumber","getNonFormattedNumber","getCallingCode","_this$state","isCountryCallingCodeAmbiguous","determineTheCountry","isInternational","prefix","_this$state2","getNonFormattedNationalNumberWithPrefix","_this$state3","getCountry","getNumber","isPossible","isValid","getTemplate","getNonFormattedTemplate","getCountries","getInputValuePrefix","withCountryCallingCode","removeInputValuePrefix","defaultMetadata","InputSmart","bool","object","createInput","InputBasic","newValue","formatIncompletePhoneNumber","ONLY_DIGITS_REGEXP","getInternationalPhoneNumberPrefix","formatPhoneNumber","formatPhoneNumberIntl","isValidPhoneNumber","isPossiblePhoneNumber","toString","usePhoneDigits","useNationalFormatForDefaultCountryValue","countryMismatchDetected","onCountryMismatch","actualCountry","console","getInitialPhoneDigits","asYouType","formatNational","getPhoneDigitsForValue","_useState2","useState","prevCountry","setPrevCountry","_useState4","prevDefaultCountry","setPrevDefaultCountry","_useState6","phoneDigits","setPhoneDigits","_useState8","valueForPhoneDigits","setValueForPhoneDigits","_useState10","setRerenderTrigger","rerender","useEffect","onSetPhoneDigits","PhoneInput","smartCaret","_usePhoneDigits2","autoComplete","_arguments","_formatPhoneNumber","_formatPhoneNumberIntl","_getCountries","_getCountryCallingCode","_isPossiblePhoneNumber","_isValidPhoneNumber"],"mappings":"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"}